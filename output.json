[
{
  "path": ".gitignore\n",
  "content": "# Compiled source #\n###################\nbuild\ndist\nnode_modules\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nmy_instructions\n# Dependencies #\n################\nnode_modules/\n\n# Log files #\n#############\n*.log\n\n# IDE config files #\n#####################\n.idea/\n.vscode/\n\n# ES6 Cache #\n#############\n.es6.cache/\n\n# Optional npm cache directory\n##############################\n.npm/\n\n# Optional eslint cache\n#######################\n.eslintcache\n\n# Optional REPL history\n#######################\n.node_repl_history\n\n# Mac System files #\n####################\n.DS_Store\n.DS_Store/\n\n# Windows System files #\n########################\nThumbs.db\nehthumbs.db\n\nsrc/db/queries.sqlite3.save\nsrc/db/schema.sqlite3.save\nyarn.lock\nsrc/assets/styles/output.css\n",
  "extension": "gitignore"
}
,
{
  "path": "index.html\n",
  "content": "<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Suivi des Patients</title>\n    <link href=\"./src/assets/styles/tailwind.css\" rel=\"stylesheet\">\n    <link href=\"./src/assets/styles/output.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"node_modules/toastify-js/src/toastify.css\">\n    <script src=\"./node_modules/apexcharts/dist/apexcharts.min.js\"></script>\n    <script src=\"node_modules/toastify-js/src/toastify.js\"></script>\n</head>\n<body class=\"bg-gray-100\">\n    <div id=\"app\" class=\"container mx-auto p-4\"></div>\n    <script src=\"./src/renderer.js\"></script>\n</body>\n\n<script>\n    function showToast(message, type = 'info') {\n        const backgroundColor = {\n            info: '#3498db',\n            success: '#07bc0c',\n            warning: '#f1c40f',\n            error: '#e74c3c'\n        };\n    \n        Toastify({\n            text: message,\n            duration: 3000,\n            close: true,\n            gravity: \"top\",\n            position: \"right\",\n            backgroundColor: backgroundColor[type],\n            stopOnFocus: true\n        }).showToast();\n    }\n    \n    // Rendre la fonction disponible globalement\n    window.showToast = showToast;\n    </script>\n</html>\n",
  "extension": "html"
}
,
{
  "path": "output.json\n",
  "content": "[\n{\n  \"path\": \".gitignore\\n\",\n  \"content\": \"# Compiled source #\\n###################\\nbuild\\ndist\\nnode_modules\\nnpm-debug.log*\\nyarn-debug.log*\\nyarn-error.log*\\nmy_instructions\\n# Dependencies #\\n################\\nnode_modules/\\n\\n# Log files #\\n#############\\n*.log\\n\\n# IDE config files #\\n#####################\\n.idea/\\n.vscode/\\n\\n# ES6 Cache #\\n#############\\n.es6.cache/\\n\\n# Optional npm cache directory\\n##############################\\n.npm/\\n\\n# Optional eslint cache\\n#######################\\n.eslintcache\\n\\n# Optional REPL history\\n#######################\\n.node_repl_history\\n\\n# Mac System files #\\n####################\\n.DS_Store\\n.DS_Store/\\n\\n# Windows System files #\\n########################\\nThumbs.db\\nehthumbs.db\\n\\nsrc/db/queries.sqlite3.save\\nsrc/db/schema.sqlite3.save\\nyarn.lock\\nsrc/assets/styles/output.css\\n\",\n  \"extension\": \"gitignore\"\n}\n,\n{\n  \"path\": \"index.html\\n\",\n  \"content\": \"<!-- index.html -->\\n<!DOCTYPE html>\\n<html lang=\\\"fr\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Suivi des Patients</title>\\n    <link href=\\\"./src/assets/styles/tailwind.css\\\" rel=\\\"stylesheet\\\">\\n    <link href=\\\"./src/assets/styles/output.css\\\" rel=\\\"stylesheet\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"node_modules/toastify-js/src/toastify.css\\\">\\n    <script src=\\\"./node_modules/apexcharts/dist/apexcharts.min.js\\\"></script>\\n    <script src=\\\"node_modules/toastify-js/src/toastify.js\\\"></script>\\n</head>\\n<body class=\\\"bg-gray-100\\\">\\n    <div id=\\\"app\\\" class=\\\"container mx-auto p-4\\\"></div>\\n    <script src=\\\"./src/renderer.js\\\"></script>\\n</body>\\n\\n<script>\\n    function showToast(message, type = 'info') {\\n        const backgroundColor = {\\n            info: '#3498db',\\n            success: '#07bc0c',\\n            warning: '#f1c40f',\\n            error: '#e74c3c'\\n        };\\n    \\n        Toastify({\\n            text: message,\\n            duration: 3000,\\n            close: true,\\n            gravity: \\\"top\\\",\\n            position: \\\"right\\\",\\n            backgroundColor: backgroundColor[type],\\n            stopOnFocus: true\\n        }).showToast();\\n    }\\n    \\n    // Rendre la fonction disponible globalement\\n    window.showToast = showToast;\\n    </script>\\n</html>\\n\",\n  \"extension\": \"html\"\n}\n",
  "extension": "json"
}
,
{
  "path": "package.json\n",
  "content": "{\n  \"name\": \"patient-tracking-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Application de suivi des patients pour les professionnels de santé\",\n  \"main\": \"./src/main.js\",\n  \"scripts\": {\n    \"rebuild\": \"electron-rebuild\",\n    \"postinstall\": \"electron-builder install-app-deps\",\n    \"start\": \"electron .\",\n    \"build:css\": \"tailwindcss -i ./src/assets/styles/tailwind.css -o ./src/assets/styles/output.css\",\n    \"watch:css\": \"tailwindcss -i ./src/assets/styles/tailwind.css -o ./src/assets/styles/output.css --watch\",\n    \"clear-cache\": \"rimraf ~/.electron && rimraf ~/.electron-gyp\",\n    \"build\": \"electron-builder\",\n    \"build:win\": \"electron-builder --win --x64\",\n    \"dev\": \"yarn clear-cache && concurrently \\\"npm run watch:css\\\" \\\"cross-env NODE_ENV=development electron .\\\"\"\n  },\n  \"keywords\": [],\n  \"author\": \"Abdoulaye BARRY\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"apexcharts\": \"^3.51.0\",\n    \"bcrypt\": \"^5.1.1\",\n    \"better-sqlite3\": \"^11.1.2\",\n    \"concurrently\": \"^8.2.2\",\n    \"docx\": \"^8.5.0\",\n    \"pdfkit\": \"^0.15.0\",\n    \"toastify-js\": \"^1.12.0\"\n  },\n  \"devDependencies\": {\n    \"@electron/rebuild\": \"^3.6.0\",\n    \"autoprefixer\": \"^10.4.20\",\n    \"cross-env\": \"^7.0.3\",\n    \"electron\": \"^31.3.1\",\n    \"electron-builder\": \"^24.13.3\",\n    \"electron-rebuild\": \"^3.2.9\",\n    \"electron-reload\": \"^2.0.0-alpha.1\",\n    \"postcss\": \"^8.4.40\",\n    \"rimraf\": \"^6.0.1\",\n    \"tailwindcss\": \"^3.4.7\"\n  },\n  \"build\": {\n    \"appId\": \"com.africadevtalents.patient-tracking-app\",\n    \"productName\": \"Suivi des Patients\",\n    \"copyright\": \"Copyright © 2023 \",\n    \"directories\": {\n      \"output\": \"dist\"\n    },\n    \"files\": [\n      \"src/**/*\",\n      \"node_modules/**/*\",\n      \"package.json\",\n      \"index.html\"\n    ],\n    \"extraResources\": [\n      {\n        \"from\": \"src/db/patient_tracking.db\",\n        \"to\": \"db/patient_tracking.db\"\n      }\n    ],\n    \"electronDownload\": {\n      \"arch\": \"x64\"\n    },\n    \"win\": {\n      \"target\": [\n        {\n          \"target\": \"nsis\",\n          \"arch\": [\n            \"x64\"\n          ]\n        }\n      ],\n      \"icon\": \"src/assets/icons/doctor.png\"\n    },\n    \"nsis\": {\n      \"oneClick\": false,\n      \"allowToChangeInstallationDirectory\": true\n    }\n  }\n}\n",
  "extension": "json"
}
,
{
  "path": "postcss.config.js\n",
  "content": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n",
  "extension": "js"
}
,
{
  "path": "src/assets/icons/doctor.ico\n",
  "content": "",
  "extension": "ico"
}
,
{
  "path": "src/assets/icons/doctor.png\n",
  "content": "",
  "extension": "png"
}
,
{
  "path": "src/assets/styles/tailwind.css\n",
  "content": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n",
  "extension": "css"
}
,
{
  "path": "src/components/Auth/ForgotPassword.js\n",
  "content": "\n",
  "extension": "js"
}
,
{
  "path": "src/components/Auth/Login.js\n",
  "content": "// src/components/Auth/Login.js\n\nexport default function Login() {\n  function render() {\n    const template = `\n        <div class=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n          <div class=\"max-w-md w-full space-y-8\">\n            <div>\n              <h2 class=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n                Connexion\n              </h2>\n            </div>\n            <form id=\"loginForm\" class=\"mt-8 space-y-6\">\n              <input type=\"hidden\" name=\"remember\" value=\"true\">\n              <div class=\"rounded-md shadow-sm -space-y-px\">\n                <div>\n                  <label for=\"username\" class=\"sr-only\">Nom d'utilisateur</label>\n                  <input id=\"username\" name=\"username\" type=\"text\" required class=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\" placeholder=\"Nom d'utilisateur\">\n                </div>\n                <div>\n                  <label for=\"password\" class=\"sr-only\">Mot de passe</label>\n                  <input id=\"password\" name=\"password\" type=\"password\" required class=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\" placeholder=\"Mot de passe\">\n                </div>\n              </div>\n\n              <div>\n                <button type=\"submit\" class=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">\n                  Se connecter\n                </button>\n              </div>\n            </form>\n            <div class=\"text-center\">\n              <a href=\"#\" id=\"registerLink\" class=\"font-medium text-indigo-600 hover:text-indigo-500\">\n                Créer un compte\n              </a>\n            </div>\n          </div>\n        </div>\n      `;\n\n    document.getElementById('app').innerHTML = template;\n    addEventListeners();\n  }\n\n  function addEventListeners() {\n    document.getElementById('loginForm').addEventListener('submit', handleLogin);\n    document.getElementById('registerLink').addEventListener('click', navigateToRegister);\n  }\n\n  function handleLogin(e) {\n    e.preventDefault();\n    const username = document.getElementById('username').value;\n    const password = document.getElementById('password').value;\n\n    if (window.electronAPI && typeof window.electronAPI.send === 'function') {\n      window.electronAPI.send('login', { username, password });\n    } else {\n      console.error('Electron API is not available');\n      showToast(\"Erreur de connexion à l'API\", 'error');\n    }\n  }\n\n  function navigateToRegister(e) {\n    e.preventDefault();\n    import('./Register.js').then(module => {\n      const Register = module.default;\n      Register();\n    }).catch(err => console.error('Error loading Register:', err));\n  }\n\n  if (window.electronAPI && typeof window.electronAPI.receive === 'function') {\n    window.electronAPI.receive('loginResponse', (response) => {\n      if (response.success) {\n        localStorage.setItem('isLoggedIn', 'true');\n        localStorage.setItem('userId', response.userId);\n        import('../Dashboard.js').then(module => {\n          const Dashboard = module.default;\n          const dashboard = Dashboard();\n          dashboard.render();\n        }).catch(err => console.error('Error loading Dashboard:', err));\n      } else {\n        showToast(response.message || 'Échec de la connexion. Veuillez vérifier vos informations.', 'error');\n      }\n    });\n  } else {\n    console.error('Electron API receive function is not available');\n  }\n\n  render();\n}\n",
  "extension": "js"
}
,
{
  "path": "src/components/Auth/Register.js\n",
  "content": "// src/components/Auth/Register.js\n\nexport default function Register() {\n  function render() {\n    const template = `\n      <div class=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n        <div class=\"max-w-md w-full space-y-8\">\n          <div>\n            <h2 class=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n              Créer un compte\n            </h2>\n          </div>\n          <form id=\"registerForm\" class=\"mt-8 space-y-6\">\n            <input type=\"hidden\" name=\"remember\" value=\"true\">\n            <div class=\"rounded-md shadow-sm -space-y-px\">\n              <div>\n                <label for=\"username\" class=\"sr-only\">Nom d'utilisateur</label>\n                <input id=\"username\" name=\"username\" type=\"text\" required class=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\" placeholder=\"Nom d'utilisateur\">\n              </div>\n              <div>\n                <label for=\"email\" class=\"sr-only\">Email</label>\n                <input id=\"email\" name=\"email\" type=\"email\" required class=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\" placeholder=\"Email\">\n              </div>\n              <div>\n                <label for=\"password\" class=\"sr-only\">Mot de passe</label>\n                <input id=\"password\" name=\"password\" type=\"password\" required class=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\" placeholder=\"Mot de passe\">\n              </div>\n              <div>\n                <label for=\"role\" class=\"sr-only\">Rôle</label>\n                <select id=\"role\" name=\"role\" required class=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\">\n                  <option value=\"\">Sélectionnez un rôle</option>\n                  <option value=\"doctor\">Médecin</option>\n                  <option value=\"nurse\">Infirmier(ère)</option>\n                  <option value=\"admin\">Administrateur</option>\n                </select>\n              </div>\n            </div>\n\n            <div>\n              <button type=\"submit\" class=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">\n                S'inscrire\n              </button>\n            </div>\n          </form>\n          <div class=\"text-center\">\n            <a href=\"#\" id=\"loginLink\" class=\"font-medium text-indigo-600 hover:text-indigo-500\">\n              Déjà un compte ? Se connecter\n            </a>\n          </div>\n        </div>\n      </div>\n    `;\n\n    document.getElementById('app').innerHTML = template;\n    addEventListeners();\n  }\n\n  function addEventListeners() {\n    document.getElementById('registerForm').addEventListener('submit', handleRegister);\n    document.getElementById('loginLink').addEventListener('click', navigateToLogin);\n  }\n\n  function handleRegister(e) {\n    e.preventDefault();\n    const username = document.getElementById('username').value;\n    const email = document.getElementById('email').value;\n    const password = document.getElementById('password').value;\n    const role = document.getElementById('role').value;\n\n    if (window.electronAPI && typeof window.electronAPI.send === 'function') {\n      window.electronAPI.send('register', { username, email, password, role });\n    } else {\n      console.error('Electron API is not available');\n      showToast(\"Erreur d'inscription\");\n    }\n  }\n\n  function navigateToLogin(e) {\n    e.preventDefault();\n    import('./Login.js').then(module => {\n      const Login = module.default;\n      Login();\n    }).catch(err => console.error('Error loading Login:', err));\n  }\n\n  if (window.electronAPI && typeof window.electronAPI.receive === 'function') {\n    window.electronAPI.receive('registerResponse', (response) => {\n      if (response.success) {\n        showToast('Inscription réussie. Veuillez vous connecter.', 'success');\n        import('./Login.js').then(module => {\n          const Login = module.default;\n          Login();\n        }).catch(err => console.error('Error loading Login:', err));\n      } else {\n        showToast(response.message || \"Échec de l'inscription. Veuillez réessayer.\", 'error');\n      }\n    });\n  } else {\n    console.error('Electron API receive function is not available');\n  }\n\n  render();\n}\n",
  "extension": "js"
}
,
{
  "path": "src/components/Charts/AgeGenderDistributionChart.js\n",
  "content": "\n",
  "extension": "js"
}
,
{
  "path": "src/components/Charts/AverageTreatmentTimeChart.js\n",
  "content": "\n",
  "extension": "js"
}
,
{
  "path": "src/components/Charts/ConsultationsPerMonthChart.js\n",
  "content": "\n",
  "extension": "js"
}
,
{
  "path": "src/components/Charts/FollowupTypesChart.js\n",
  "content": "\n",
  "extension": "js"
}
,
{
  "path": "src/components/Charts/MissedAppointmentsChart.js\n",
  "content": "\n",
  "extension": "js"
}
,
{
  "path": "src/components/Charts/TotalPatientsChart.js\n",
  "content": "\n",
  "extension": "js"
}
,
{
  "path": "src/components/Configuration/ConfigurationMenu.js\n",
  "content": "// src/components/Configuration/ConfigurationMenu.js\n\nexport default function ConfigurationMenu() {\n  function render() {\n    const template = `\n      <div class=\"min-h-screen bg-gray-100\">\n        <nav class=\"bg-white shadow-sm\">\n          <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div class=\"flex justify-between h-16\">\n              <div class=\"flex\">\n                <div class=\"flex-shrink-0 flex items-center\">\n                  <h1 class=\"text-xl font-bold\">Suivi des Patients</h1>\n                </div>\n                <div class=\"hidden sm:ml-6 sm:flex sm:space-x-8\">\n                  <a href=\"#\" id=\"dashboardLink\" class=\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium\">\n                    Dashboard\n                  </a>\n                  <a href=\"#\" id=\"patientListLink\" class=\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium\">\n                    Liste des Patients\n                  </a>\n                  <a href=\"#\" class=\"border-indigo-500 text-gray-900 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium\">\n                    Configuration\n                  </a>\n                </div>\n              </div>\n              <div class=\"hidden sm:ml-6 sm:flex sm:items-center\">\n                <button id=\"logoutButton\" class=\"ml-3 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">\n                  Déconnexion\n                </button>\n              </div>\n            </div>\n          </div>\n        </nav>\n\n        <div class=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n          <div class=\"px-4 py-6 sm:px-0\">\n            <h2 class=\"text-2xl font-semibold mb-5\">Configuration</h2>\n            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <button id=\"manageProfessions\" class=\"px-4 py-2 text-white bg-blue-500 rounded hover:bg-blue-600\">\n                Gérer les professions\n              </button>\n              <button id=\"manageResidences\" class=\"px-4 py-2 text-white bg-green-500 rounded hover:bg-green-600\">\n                Gérer les résidences\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n\n    document.getElementById('app').innerHTML = template;\n    addEventListeners();\n  }\n\n  function addEventListeners() {\n    document.getElementById('dashboardLink').addEventListener('click', navigateToDashboard);\n    document.getElementById('patientListLink').addEventListener('click', navigateToPatientList);\n    document.getElementById('logoutButton').addEventListener('click', handleLogout);\n    document.getElementById('manageProfessions').addEventListener('click', navigateToProfessionManager);\n    document.getElementById('manageResidences').addEventListener('click', navigateToResidenceManager);\n  }\n\n  function navigateToDashboard(e) {\n    e.preventDefault();\n    import('../Dashboard.js').then(module => {\n      const Dashboard = module.default;\n      const dashboard = Dashboard();\n      dashboard.render();\n    }).catch(err => console.error('Error loading Dashboard:', err));\n  }\n\n  function navigateToPatientList(e) {\n    e.preventDefault();\n    import('../Patients/PatientList.js').then(module => {\n      const PatientList = module.default;\n      const patientList = PatientList();\n      patientList.render();\n    }).catch(err => console.error('Error loading PatientList:', err));\n  }\n\n  function handleLogout() {\n    localStorage.removeItem('isLoggedIn');\n    localStorage.removeItem('userId');\n    import('../Auth/Login.js').then(module => {\n      const Login = module.default;\n      Login();\n    }).catch(err => console.error('Error loading Login:', err));\n  }\n\n  function navigateToProfessionManager() {\n    import('./ProfessionManager.js').then(module => {\n      const ProfessionManager = module.default;\n      ProfessionManager().render();\n    }).catch(err => console.error('Error loading ProfessionManager:', err));\n  }\n\n  function navigateToResidenceManager() {\n    import('./ResidenceManager.js').then(module => {\n      const ResidenceManager = module.default;\n      ResidenceManager().render();\n    }).catch(err => console.error('Error loading ResidenceManager:', err));\n  }\n\n  return { render };\n}\n",
  "extension": "js"
}
,
{
  "path": "src/components/Configuration/ProfessionManager.js\n",
  "content": "// src/components/Configuration/ProfessionManager.js\n\nexport default function ProfessionManager() {\n  function render() {\n    const template = `\n      <div class=\"min-h-screen bg-gray-100\">\n        <nav class=\"bg-white shadow-sm\">\n          <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div class=\"flex justify-between h-16\">\n              <div class=\"flex\">\n                <div class=\"flex-shrink-0 flex items-center\">\n                  <h1 class=\"text-xl font-bold\">Suivi des Patients</h1>\n                </div>\n                <div class=\"hidden sm:ml-6 sm:flex sm:space-x-8\">\n                  <a href=\"#\" id=\"dashboardLink\" class=\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium\">\n                    Dashboard\n                  </a>\n                  <a href=\"#\" id=\"patientListLink\" class=\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium\">\n                    Liste des Patients\n                  </a>\n                  <a href=\"#\" id=\"configLink\" class=\"border-indigo-500 text-gray-900 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium\">\n                    Configuration\n                  </a>\n                </div>\n              </div>\n              <div class=\"hidden sm:ml-6 sm:flex sm:items-center\">\n                <button id=\"logoutButton\" class=\"ml-3 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">\n                  Déconnexion\n                </button>\n              </div>\n            </div>\n          </div>\n        </nav>\n\n        <div class=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n          <div class=\"px-4 py-6 sm:px-0\">\n            <h2 class=\"text-2xl font-semibold mb-5\">Gérer les professions</h2>\n            <form id=\"addProfessionForm\" class=\"mb-4\">\n              <div class=\"flex\">\n                <input type=\"text\" id=\"professionName\" placeholder=\"Nouvelle profession\" class=\"flex-grow px-3 py-2 border rounded-l\">\n                <button type=\"submit\" class=\"px-4 py-2 bg-blue-500 text-white rounded-r hover:bg-blue-600\">Ajouter</button>\n              </div>\n            </form>\n            <ul id=\"professionList\" class=\"space-y-2\"></ul>\n          </div>\n        </div>\n      </div>\n    `;\n\n    document.getElementById('app').innerHTML = template;\n    loadProfessions();\n    addEventListeners();\n  }\n\n  function addEventListeners() {\n    document.getElementById('dashboardLink').addEventListener('click', navigateToDashboard);\n    document.getElementById('patientListLink').addEventListener('click', navigateToPatientList);\n    document.getElementById('configLink').addEventListener('click', navigateToConfig);\n    document.getElementById('logoutButton').addEventListener('click', handleLogout);\n    document.getElementById('addProfessionForm').addEventListener('submit', handleAddProfession);\n  }\n\n  function navigateToDashboard(e) {\n    e.preventDefault();\n    import('../Dashboard.js').then(module => {\n      const Dashboard = module.default;\n      const dashboard = Dashboard();\n      dashboard.render();\n    }).catch(err => console.error('Error loading Dashboard:', err));\n  }\n\n  function navigateToPatientList(e) {\n    e.preventDefault();\n    import('../Patients/PatientList.js').then(module => {\n      const PatientList = module.default;\n      const patientList = PatientList();\n      patientList.render();\n    }).catch(err => console.error('Error loading PatientList:', err));\n  }\n\n  function navigateToConfig(e) {\n    e.preventDefault();\n    import('./ConfigurationMenu.js').then(module => {\n      const ConfigurationMenu = module.default;\n      ConfigurationMenu().render();\n    }).catch(err => console.error('Error loading ConfigurationMenu:', err));\n  }\n\n  function handleLogout() {\n    localStorage.removeItem('isLoggedIn');\n    localStorage.removeItem('userId');\n    import('../Auth/Login.js').then(module => {\n      const Login = module.default;\n      Login();\n    }).catch(err => console.error('Error loading Login:', err));\n  }\n\n  function handleAddProfession(e) {\n    e.preventDefault();\n    const professionName = document.getElementById('professionName').value;\n    if (professionName) {\n      window.electronAPI.send('addProfession', professionName);\n      document.getElementById('professionName').value = '';\n    }\n  }\n\n  function loadProfessions() {\n    window.electronAPI.send('getProfessions');\n  }\n\n  function deleteProfession(id) {\n    window.electronAPI.send('deleteProfession', id);\n  }\n\n  window.electronAPI.receive('professionsData', (professions) => {\n    const list = document.getElementById('professionList');\n    list.innerHTML = professions.map(p => `\n      <li class=\"flex justify-between items-center p-2 bg-white rounded shadow\">\n        <span>${p.name}</span>\n        <button class=\"delete-profession text-red-500 hover:text-red-700\" data-id=\"${p.id}\">Supprimer</button>\n      </li>\n    `).join('');\n\n    document.querySelectorAll('.delete-profession').forEach(button => {\n      button.addEventListener('click', () => deleteProfession(button.dataset.id));\n    });\n  });\n\n\n\n  window.electronAPI.receive('professionAdded', (result) => {\n    if (result.error) {\n      showToast(`Erreur lors de l'ajout de la profession: ${result.error}`, 'error');\n    } else {\n      loadProfessions();\n    }\n  });\n\n  window.electronAPI.receive('professionDeleted', (result) => {\n    if (result.error) {\n      showToast(`Erreur lors de la suppression de la profession: ${result.error}`, `error`);\n    } else {\n      loadProfessions();\n    }\n  });\n\n  return { render };\n}\n",
  "extension": "js"
}
,
{
  "path": "src/components/Configuration/ResidenceManager.js\n",
  "content": "// src/components/Configuration/ResidenceManager.js\n\nexport default function ResidenceManager() {\n  function render() {\n    const template = `\n      <div class=\"min-h-screen bg-gray-100\">\n        <nav class=\"bg-white shadow-sm\">\n          <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div class=\"flex justify-between h-16\">\n              <div class=\"flex\">\n                <div class=\"flex-shrink-0 flex items-center\">\n                  <h1 class=\"text-xl font-bold\">Suivi des Patients</h1>\n                </div>\n                <div class=\"hidden sm:ml-6 sm:flex sm:space-x-8\">\n                  <a href=\"#\" id=\"dashboardLink\" class=\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium\">\n                    Dashboard\n                  </a>\n                  <a href=\"#\" id=\"patientListLink\" class=\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium\">\n                    Liste des Patients\n                  </a>\n                  <a href=\"#\" id=\"configLink\" class=\"border-indigo-500 text-gray-900 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium\">\n                    Configuration\n                  </a>\n                </div>\n              </div>\n              <div class=\"hidden sm:ml-6 sm:flex sm:items-center\">\n                <button id=\"logoutButton\" class=\"ml-3 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">\n                  Déconnexion\n                </button>\n              </div>\n            </div>\n          </div>\n        </nav>\n\n        <div class=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n          <div class=\"px-4 py-6 sm:px-0\">\n            <h2 class=\"text-2xl font-semibold mb-5\">Gérer les résidences</h2>\n            <form id=\"addResidenceForm\" class=\"mb-4\">\n              <div class=\"flex space-x-2\">\n                <input type=\"text\" id=\"residenceName\" placeholder=\"Nouvelle résidence\" class=\"flex-grow px-3 py-2 border rounded-l\">\n                <select id=\"residenceType\" class=\"px-3 py-2 border\">\n                  <option value=\"current\">Résidence actuelle</option>\n                  <option value=\"usual\">Résidence habituelle</option>\n                </select>\n                <button type=\"submit\" class=\"px-4 py-2 bg-green-500 text-white rounded-r hover:bg-green-600\">Ajouter</button>\n              </div>\n            </form>\n            <ul id=\"residenceList\" class=\"space-y-2\"></ul>\n          </div>\n        </div>\n      </div>\n    `;\n\n    document.getElementById('app').innerHTML = template;\n    loadResidences();\n    addEventListeners();\n  }\n\n  function addEventListeners() {\n    document.getElementById('dashboardLink').addEventListener('click', navigateToDashboard);\n    document.getElementById('patientListLink').addEventListener('click', navigateToPatientList);\n    document.getElementById('configLink').addEventListener('click', navigateToConfig);\n    document.getElementById('logoutButton').addEventListener('click', handleLogout);\n    document.getElementById('addResidenceForm').addEventListener('submit', handleAddResidence);\n  }\n\n  function navigateToDashboard(e) {\n    e.preventDefault();\n    import('../Dashboard.js').then(module => {\n      const Dashboard = module.default;\n      const dashboard = Dashboard();\n      dashboard.render();\n    }).catch(err => console.error('Error loading Dashboard:', err));\n  }\n\n  function navigateToPatientList(e) {\n    e.preventDefault();\n    import('../Patients/PatientList.js').then(module => {\n      const PatientList = module.default;\n      const patientList = PatientList();\n      patientList.render();\n    }).catch(err => console.error('Error loading PatientList:', err));\n  }\n\n  function navigateToConfig(e) {\n    e.preventDefault();\n    import('./ConfigurationMenu.js').then(module => {\n      const ConfigurationMenu = module.default;\n      ConfigurationMenu().render();\n    }).catch(err => console.error('Error loading ConfigurationMenu:', err));\n  }\n\n  function handleLogout() {\n    localStorage.removeItem('isLoggedIn');\n    localStorage.removeItem('userId');\n    import('../Auth/Login.js').then(module => {\n      const Login = module.default;\n      Login();\n    }).catch(err => console.error('Error loading Login:', err));\n  }\n\n  function handleAddResidence(e) {\n    e.preventDefault();\n    const residenceName = document.getElementById('residenceName').value;\n    const residenceType = document.getElementById('residenceType').value;\n    if (residenceName) {\n      window.electronAPI.send('addResidence', { name: residenceName, type: residenceType });\n      document.getElementById('residenceName').value = '';\n    }\n  }\n\n  function loadResidences() {\n    window.electronAPI.send('getResidences');\n  }\n\n  function deleteResidence(id) {\n    window.electronAPI.send('deleteResidence', id);\n  }\n\n  window.electronAPI.receive('residencesData', (residences) => {\n    const list = document.getElementById('residenceList');\n    list.innerHTML = residences.map(r => `\n      <li class=\"flex justify-between items-center p-2 bg-white rounded shadow\">\n        <span>${r.name} (${r.type})</span>\n        <button class=\"delete-residence text-red-500 hover:text-red-700\" data-id=\"${r.id}\">Supprimer</button>\n      </li>\n    `).join('');\n\n    document.querySelectorAll('.delete-residence').forEach(button => {\n      button.addEventListener('click', () => deleteResidence(button.dataset.id));\n    });\n  });\n\n\n\n  window.electronAPI.receive('residenceAdded', (result) => {\n    if (result.error) {\n      showToast(`Erreur lors de l'ajout de la résidence: ${result.error}`, 'error');\n    } else {\n      loadResidences();\n    }\n  });\n\n  window.electronAPI.receive('residenceDeleted', (result) => {\n    if (result.error) {\n      showToast(`Erreur lors de la suppression de la résidence: ${result.error}`, 'error');\n    } else {\n      loadResidences();\n    }\n  });\n\n  return { render };\n}\n",
  "extension": "js"
}
,
{
  "path": "src/components/Consultations/AddConsultation.js\n",
  "content": "// src/components/Consultations/AddConsultation.js\n\nexport default function AddConsultation(patientId, onConsultationAdded) {\n  let formContainer = null;\n\n  function render() {\n    const template = `\n        <div class=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full\" id=\"addConsultationModal\">\n          <div class=\"relative top-20 mx-auto p-5 border w-3/4 shadow-lg rounded-md bg-white\">\n            <div class=\"mt-3 text-center\">\n              <h3 class=\"text-lg leading-6 font-medium text-gray-900\">Ajouter une consultation</h3>\n              <form id=\"addConsultationForm\" class=\"mt-2 text-left\">\n                <div class=\"grid grid-cols-2 gap-4\">\n                  <div class=\"mb-4\">\n                    <label for=\"consultationDate\" class=\"block text-gray-700 text-sm font-bold mb-2\">Date de consultation</label>\n                    <input type=\"date\" id=\"consultationDate\" name=\"consultationDate\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" required>\n                  </div>\n                  <div class=\"mb-4\">\n                    <label for=\"reason\" class=\"block text-gray-700 text-sm font-bold mb-2\">Motif</label>\n                    <input type=\"text\" id=\"reason\" name=\"reason\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" required>\n                  </div>\n                  <div class=\"mb-4\">\n                    <label for=\"bloodPressure\" class=\"block text-gray-700 text-sm font-bold mb-2\">Tension artérielle</label>\n                    <input type=\"text\" id=\"bloodPressure\" name=\"bloodPressure\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" placeholder=\"ex: 120/80\">\n                  </div>\n                  <div class=\"mb-4\">\n                    <label for=\"pulse\" class=\"block text-gray-700 text-sm font-bold mb-2\">Pouls</label>\n                    <input type=\"number\" id=\"pulse\" name=\"pulse\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" placeholder=\"ex: 72\">\n                  </div>\n                  <div class=\"mb-4\">\n                    <label for=\"weight\" class=\"block text-gray-700 text-sm font-bold mb-2\">Poids (kg)</label>\n                    <input type=\"number\" id=\"weight\" name=\"weight\" step=\"0.1\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" placeholder=\"ex: 70.5\">\n                  </div>\n                  <div class=\"mb-4\">\n                    <label for=\"temperature\" class=\"block text-gray-700 text-sm font-bold mb-2\">Température (°C)</label>\n                    <input type=\"number\" id=\"temperature\" name=\"temperature\" step=\"0.1\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" placeholder=\"ex: 37.0\">\n                  </div>\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"medicalHistory\" class=\"block text-gray-700 text-sm font-bold mb-2\">Antécédents médicaux</label>\n                  <textarea id=\"medicalHistory\" name=\"medicalHistory\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" rows=\"3\"></textarea>\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"clinicalExamination\" class=\"block text-gray-700 text-sm font-bold mb-2\">Examen clinique</label>\n                  <textarea id=\"clinicalExamination\" name=\"clinicalExamination\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" rows=\"3\"></textarea>\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"diagnosis\" class=\"block text-gray-700 text-sm font-bold mb-2\">Diagnostic</label>\n                  <input type=\"text\" id=\"diagnosis\" name=\"diagnosis\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\">\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"treatment\" class=\"block text-gray-700 text-sm font-bold mb-2\">Traitement</label>\n                  <textarea id=\"treatment\" name=\"treatment\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" rows=\"3\"></textarea>\n                </div>\n                <div class=\"flex items-center justify-between mt-4\">\n                  <button type=\"button\" id=\"cancelAddConsultation\" class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\n                    Annuler\n                  </button>\n                  <button type=\"submit\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\n                    Ajouter\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      `;\n\n    formContainer = document.createElement('div');\n    formContainer.innerHTML = template;\n    document.body.appendChild(formContainer);\n\n    addEventListeners();\n  }\n\n  function addEventListeners() {\n    formContainer.querySelector('#addConsultationForm').addEventListener('submit', handleAddConsultation);\n    formContainer.querySelector('#cancelAddConsultation').addEventListener('click', closeModal);\n  }\n\n\n\n  function handleAddConsultation(e) {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    const consultationData = Object.fromEntries(formData.entries());\n\n    consultationData.patientId = patientId;\n    consultationData.pulse = parseInt(consultationData.pulse) || null;\n    consultationData.weight = parseFloat(consultationData.weight) || null;\n    consultationData.temperature = parseFloat(consultationData.temperature) || null;\n\n    window.electronAPI.send('addConsultation', consultationData);\n  }\n\n  function closeModal() {\n    if (formContainer) {\n      formContainer.remove();\n    }\n  }\n\n  window.electronAPI.receive('addConsultationResponse', (response) => {\n    if (response.success) {\n      showToast('Consultation ajoutée avec succès', 'success');\n      closeModal();\n      if (typeof onConsultationAdded === 'function') {\n        onConsultationAdded();\n      }\n    } else {\n      showToast(\"Erreur lors de l'ajout de la consultation : \" + response.error, 'error');\n    }\n  });\n\n  return {\n    render,\n    closeModal\n  };\n}\n",
  "extension": "js"
}
,
{
  "path": "src/components/Consultations/ConsultationDetails.js\n",
  "content": "\n",
  "extension": "js"
}
,
{
  "path": "src/components/Consultations/ConsultationList.js\n",
  "content": "\n",
  "extension": "js"
}
,
{
  "path": "src/components/Consultations/EditConsultation.js\n",
  "content": "// src/components/Consultations/EditConsultation.js\n\nexport default function EditConsultation(consultationId, onConsultationUpdated) {\n  let formContainer = null;\n  let consultationData = null;\n\n  function render() {\n    const template = `\n        <div class=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full\" id=\"editConsultationModal\">\n          <div class=\"relative top-20 mx-auto p-5 border w-3/4 shadow-lg rounded-md bg-white\">\n            <div class=\"mt-3 text-center\">\n              <h3 class=\"text-lg leading-6 font-medium text-gray-900\">Modifier la consultation</h3>\n              <form id=\"editConsultationForm\" class=\"mt-2 text-left\">\n                <div class=\"grid grid-cols-2 gap-4\">\n                  <div class=\"mb-4\">\n                    <label for=\"consultationDate\" class=\"block text-gray-700 text-sm font-bold mb-2\">Date de consultation</label>\n                    <input type=\"date\" id=\"consultationDate\" name=\"consultationDate\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" required>\n                  </div>\n                  <div class=\"mb-4\">\n                    <label for=\"reason\" class=\"block text-gray-700 text-sm font-bold mb-2\">Motif</label>\n                    <input type=\"text\" id=\"reason\" name=\"reason\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" required>\n                  </div>\n                  <div class=\"mb-4\">\n                    <label for=\"bloodPressure\" class=\"block text-gray-700 text-sm font-bold mb-2\">Tension artérielle</label>\n                    <input type=\"text\" id=\"bloodPressure\" name=\"bloodPressure\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" placeholder=\"ex: 120/80\">\n                  </div>\n                  <div class=\"mb-4\">\n                    <label for=\"pulse\" class=\"block text-gray-700 text-sm font-bold mb-2\">Pouls</label>\n                    <input type=\"number\" id=\"pulse\" name=\"pulse\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" placeholder=\"ex: 72\">\n                  </div>\n                  <div class=\"mb-4\">\n                    <label for=\"weight\" class=\"block text-gray-700 text-sm font-bold mb-2\">Poids (kg)</label>\n                    <input type=\"number\" id=\"weight\" name=\"weight\" step=\"0.1\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" placeholder=\"ex: 70.5\">\n                  </div>\n                  <div class=\"mb-4\">\n                    <label for=\"temperature\" class=\"block text-gray-700 text-sm font-bold mb-2\">Température (°C)</label>\n                    <input type=\"number\" id=\"temperature\" name=\"temperature\" step=\"0.1\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" placeholder=\"ex: 37.0\">\n                  </div>\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"medicalHistory\" class=\"block text-gray-700 text-sm font-bold mb-2\">Antécédents médicaux</label>\n                  <textarea id=\"medicalHistory\" name=\"medicalHistory\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" rows=\"3\"></textarea>\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"clinicalExamination\" class=\"block text-gray-700 text-sm font-bold mb-2\">Examen clinique</label>\n                  <textarea id=\"clinicalExamination\" name=\"clinicalExamination\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" rows=\"3\"></textarea>\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"diagnosis\" class=\"block text-gray-700 text-sm font-bold mb-2\">Diagnostic</label>\n                  <input type=\"text\" id=\"diagnosis\" name=\"diagnosis\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\">\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"treatment\" class=\"block text-gray-700 text-sm font-bold mb-2\">Traitement</label>\n                  <textarea id=\"treatment\" name=\"treatment\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" rows=\"3\"></textarea>\n                </div>\n                <div class=\"flex items-center justify-between mt-4\">\n                  <button type=\"button\" id=\"cancelEditConsultation\" class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\n                    Annuler\n                  </button>\n                  <button type=\"submit\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\n                    Mettre à jour\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      `;\n\n    formContainer = document.createElement('div');\n    formContainer.innerHTML = template;\n    document.body.appendChild(formContainer);\n\n    loadConsultationData();\n    addEventListeners();\n  }\n\n  function addEventListeners() {\n    formContainer.querySelector('#editConsultationForm').addEventListener('submit', handleEditConsultation);\n    formContainer.querySelector('#cancelEditConsultation').addEventListener('click', closeModal);\n  }\n\n  function loadConsultationData() {\n    window.electronAPI.send('getConsultationDetails', consultationId);\n  }\n\n  function populateForm(consultation) {\n    consultationData = consultation;\n    formContainer.querySelector('#consultationDate').value = consultation.consultation_date;\n    formContainer.querySelector('#reason').value = consultation.reason || '';\n    formContainer.querySelector('#bloodPressure').value = consultation.blood_pressure || '';\n    formContainer.querySelector('#pulse').value = consultation.pulse || '';\n    formContainer.querySelector('#weight').value = consultation.weight || '';\n    formContainer.querySelector('#temperature').value = consultation.temperature || '';\n    formContainer.querySelector('#medicalHistory').value = consultation.medical_history || '';\n    formContainer.querySelector('#clinicalExamination').value = consultation.clinical_examination || '';\n    formContainer.querySelector('#diagnosis').value = consultation.diagnosis || '';\n    formContainer.querySelector('#treatment').value = consultation.medical_treatment || '';\n  }\n\n  function handleEditConsultation(e) {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    const updatedConsultationData = Object.fromEntries(formData.entries());\n\n    updatedConsultationData.id = consultationId;\n    updatedConsultationData.pulse = parseInt(updatedConsultationData.pulse) || null;\n    updatedConsultationData.weight = parseFloat(updatedConsultationData.weight) || null;\n    updatedConsultationData.temperature = parseFloat(updatedConsultationData.temperature) || null;\n\n    window.electronAPI.send('updateConsultation', updatedConsultationData);\n  }\n\n  function closeModal() {\n    if (formContainer) {\n      formContainer.remove();\n    }\n  }\n\n  window.electronAPI.receive('consultationDetailsResponse', (consultation) => {\n    populateForm(consultation);\n  });\n\n\n\n  window.electronAPI.receive('updateConsultationResponse', (response) => {\n    if (response.success) {\n      showToast('Consultation mise à jour avec succès', 'success');\n      closeModal();\n      if (typeof onConsultationUpdated === 'function') {\n        onConsultationUpdated();\n      }\n    } else {\n      showToast(\"Erreur lors de la mise à jour de la consultation : \" + response.error, 'error');\n    }\n  });\n\n  return {\n    render,\n    closeModal\n  };\n}\n",
  "extension": "js"
}
,
{
  "path": "src/components/Dashboard.js\n",
  "content": "// src/components/Dashboard.js\n\nexport default function Dashboard() {\n  function render() {\n    const template = `\n      <div class=\"min-h-screen bg-gray-100\">\n        <nav class=\"bg-white shadow-sm\">\n          <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div class=\"flex justify-between h-16\">\n              <div class=\"flex\">\n                <div class=\"flex-shrink-0 flex items-center\">\n                  <h1 class=\"text-xl font-bold\">Suivi des Patients</h1>\n                </div>\n                <div class=\"hidden sm:ml-6 sm:flex sm:space-x-8\">\n                  <a href=\"#\" class=\"border-indigo-500 text-gray-900 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium\">\n                    Dashboard\n                  </a>\n                  <a href=\"#\" id=\"patientListLink\" class=\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium\">\n                    Liste des Patients\n                  </a>\n                  <a href=\"#\" id=\"configLink\" class=\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium\">\n                    Configuration\n                  </a>\n                </div>\n              </div>\n              <div class=\"hidden sm:ml-6 sm:flex sm:items-center\">\n                <button id=\"logoutButton\" class=\"ml-3 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">\n                  Déconnexion\n                </button>\n              </div>\n            </div>\n          </div>\n        </nav>\n\n        <header class=\"bg-white shadow\">\n          <div class=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n            <h2 class=\"text-3xl font-bold text-gray-900\">Dashboard</h2>\n          </div>\n        </header>\n\n        <main>\n          <div class=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n            <div class=\"px-4 py-6 sm:px-0\">\n              <div class=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-3\">\n                <div class=\"bg-white overflow-hidden shadow rounded-lg\">\n                  <div class=\"p-5\">\n                    <div class=\"flex items-center\">\n                      <div class=\"flex-shrink-0 bg-indigo-500 rounded-md p-3\">\n                        <svg class=\"h-6 w-6 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n                        </svg>\n                      </div>\n                      <div class=\"ml-5 w-0 flex-1\">\n                        <dl>\n                          <dt class=\"text-sm font-medium text-gray-500 truncate\">\n                            Total Patients\n                          </dt>\n                          <dd class=\"text-lg font-medium text-gray-900\" id=\"totalPatients\">\n                            Chargement...\n                          </dd>\n                        </dl>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div class=\"bg-white overflow-hidden shadow rounded-lg\">\n                  <div class=\"p-5\">\n                    <div class=\"flex items-center\">\n                      <div class=\"flex-shrink-0 bg-green-500 rounded-md p-3\">\n                        <svg class=\"h-6 w-6 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01\" />\n                        </svg>\n                      </div>\n                      <div class=\"ml-5 w-0 flex-1\">\n                        <dl>\n                          <dt class=\"text-sm font-medium text-gray-500 truncate\">\n                            Consultations ce mois\n                          </dt>\n                          <dd class=\"text-lg font-medium text-gray-900\" id=\"monthlyConsultations\">\n                            Chargement...\n                          </dd>\n                        </dl>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"mt-8\">\n                <div class=\"bg-white overflow-hidden shadow rounded-lg\">\n                  <div class=\"p-5\">\n                    <h3 class=\"text-lg leading-6 font-medium text-gray-900\">Consultations par mois</h3>\n                    <div class=\"mt-5\">\n                      <div id=\"consultationsChart\" style=\"height: 300px;\"></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"mt-8\">\n                <div class=\"bg-white overflow-hidden shadow rounded-lg\">\n                  <div class=\"p-5\">\n                    <h3 class=\"text-lg leading-6 font-medium text-gray-900\">Répartition des patients par âge et sexe</h3>\n                    <div class=\"mt-5\">\n                      <div id=\"ageGenderDistributionChart\" style=\"height: 350px;\"></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n            </div>\n          </div>\n        </main>\n      </div>\n    `;\n\n    document.getElementById('app').innerHTML = template;\n    addEventListeners();\n    loadDashboardData();\n  }\n\n  function addEventListeners() {\n    document.getElementById('logoutButton').addEventListener('click', handleLogout);\n    document.getElementById('patientListLink').addEventListener('click', navigateToPatientList);\n    document.getElementById('configLink').addEventListener('click', navigateToConfig);\n\n  }\n\n  function navigateToConfig(e) {\n    e.preventDefault();\n    import('./Configuration/ConfigurationMenu.js').then(module => {\n      const ConfigurationMenu = module.default;\n      ConfigurationMenu().render();\n    }).catch(err => console.error('Error loading ConfigurationMenu:', err));\n  }\n\n  function navigateToPatientList(e) {\n    e.preventDefault();\n    import('./Patients/PatientList.js').then(module => {\n      const PatientList = module.default;\n      const patientList = PatientList();\n      patientList.render();\n    }).catch(err => console.error('Error loading PatientList:', err));\n  }\n\n  function handleLogout() {\n    localStorage.removeItem('isLoggedIn');\n    localStorage.removeItem('userId');\n    import('./Auth/Login.js').then(module => {\n      const Login = module.default;\n      Login();\n    }).catch(err => console.error('Error loading Login:', err));\n  }\n\n  function loadDashboardData() {\n    const userId = localStorage.getItem('userId');\n    if (!userId) {\n      console.error('User ID not found in localStorage');\n      updateDashboardUI({ error: 'Utilisateur non connecté' });\n      return;\n    }\n\n    if (window.electronAPI && typeof window.electronAPI.send === 'function') {\n      window.electronAPI.send('getDashboardData', userId);\n      window.electronAPI.send('getAgeGenderDistribution', userId);\n    } else {\n      console.error('Electron API is not available');\n      updateDashboardUI({ error: 'Impossible de charger les données' });\n    }\n  }\n\n  function createConsultationsChart(data) {\n    if (!data?.labels || !data?.values || data.labels.length === 0 || data.values.length === 0) {\n      console.error('Invalid chart data:', data);\n      document.getElementById('consultationsChart').innerHTML = 'Données non disponibles pour le graphique';\n      return;\n    }\n\n    const options = {\n      chart: {\n        type: 'bar',\n        height: 350\n      },\n      series: [{\n        name: 'Consultations',\n        data: data.values\n      }],\n      xaxis: {\n        categories: data.labels,\n        title: {\n          text: 'Mois'\n        }\n      },\n      yaxis: {\n        title: {\n          text: 'Nombre de consultations'\n        }\n      },\n      colors: ['#4F46E5']\n    };\n\n    const chart = new ApexCharts(document.getElementById('consultationsChart'), options);\n    chart.render();\n  }\n\n  function updateDashboardUI(data) {\n    if (data.error) {\n      document.getElementById('totalPatients').textContent = 'Erreur';\n      document.getElementById('monthlyConsultations').textContent = 'Erreur';\n      document.getElementById('consultationsChart').innerHTML = data.error;\n      return;\n    }\n\n    document.getElementById('totalPatients').textContent = data.totalPatients || 'N/A';\n    document.getElementById('monthlyConsultations').textContent = data.monthlyConsultations || 'N/A';\n    createConsultationsChart(data.consultationsPerMonth);\n  }\n\n  function createAgeGenderDistributionChart(data) {\n    const options = {\n      chart: {\n        type: 'bar',\n        height: 350,\n        stacked: true,\n      },\n      series: [\n        {\n          name: 'Hommes',\n          data: data.male\n        },\n        {\n          name: 'Femmes',\n          data: data.female\n        }\n      ],\n      xaxis: {\n        categories: ['0-18', '19-30', '31-45', '46-60', '61+'],\n        title: {\n          text: 'Tranches d\\'âge'\n        }\n      },\n      yaxis: {\n        title: {\n          text: 'Nombre de patients'\n        }\n      },\n      colors: ['#008FFB', '#FF4560'],\n      title: {\n        text: 'Répartition des patients par âge et sexe',\n        align: 'center'\n      }\n    };\n\n    const chart = new ApexCharts(document.getElementById('ageGenderDistributionChart'), options);\n    chart.render();\n  }\n\n  if (window.electronAPI && typeof window.electronAPI.receive === 'function') {\n    window.electronAPI.receive('dashboardDataResponse', (data) => {\n      console.log('Received dashboard data:', data);\n      updateDashboardUI(data);\n    });\n\n    window.electronAPI.receive('ageGenderDistributionResponse', (data) => {\n      if (data.error) {\n        console.error('Error loading age-gender distribution:', data.error);\n      } else {\n        createAgeGenderDistributionChart(data);\n      }\n    });\n\n  } else {\n    console.error('Electron API receive function is not available');\n  }\n\n  return {\n    render\n  };\n}\n",
  "extension": "js"
}
,
{
  "path": "src/components/Followups/AddFollowup.js\n",
  "content": "// src/components/Followups/AddFollowup.js\n\nexport default function AddFollowup(patientId, onFollowupAdded) {\n  let formContainer = null;\n\n  function render() {\n    const template = `\n        <div class=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full\" id=\"addFollowupModal\">\n          <div class=\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\">\n            <div class=\"mt-3 text-center\">\n              <h3 class=\"text-lg leading-6 font-medium text-gray-900\">Ajouter un suivi</h3>\n              <form id=\"addFollowupForm\" class=\"mt-2 text-left\">\n                <div class=\"mb-4\">\n                  <label for=\"followupDate\" class=\"block text-gray-700 text-sm font-bold mb-2\">Date du suivi</label>\n                  <input type=\"date\" id=\"followupDate\" name=\"followupDate\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" required>\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"bloodPressure\" class=\"block text-gray-700 text-sm font-bold mb-2\">Tension artérielle</label>\n                  <input type=\"text\" id=\"bloodPressure\" name=\"bloodPressure\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" placeholder=\"ex: 120/80\">\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"pulse\" class=\"block text-gray-700 text-sm font-bold mb-2\">Pouls</label>\n                  <input type=\"number\" id=\"pulse\" name=\"pulse\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" placeholder=\"ex: 72\">\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"weight\" class=\"block text-gray-700 text-sm font-bold mb-2\">Poids (kg)</label>\n                  <input type=\"number\" id=\"weight\" name=\"weight\" step=\"0.1\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" placeholder=\"ex: 70.5\">\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"temperature\" class=\"block text-gray-700 text-sm font-bold mb-2\">Température (°C)</label>\n                  <input type=\"number\" id=\"temperature\" name=\"temperature\" step=\"0.1\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" placeholder=\"ex: 37.0\">\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"observation\" class=\"block text-gray-700 text-sm font-bold mb-2\">Observation</label>\n                  <textarea id=\"observation\" name=\"observation\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" rows=\"3\"></textarea>\n                </div>\n                <div class=\"flex items-center justify-between mt-4\">\n                  <button type=\"button\" id=\"cancelAddFollowup\" class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\n                    Annuler\n                  </button>\n                  <button type=\"submit\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\n                    Ajouter\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      `;\n\n    formContainer = document.createElement('div');\n    formContainer.innerHTML = template;\n    document.body.appendChild(formContainer);\n\n    addEventListeners();\n  }\n\n  function addEventListeners() {\n    formContainer.querySelector('#addFollowupForm').addEventListener('submit', handleAddFollowup);\n    formContainer.querySelector('#cancelAddFollowup').addEventListener('click', closeModal);\n  }\n\n  function handleAddFollowup(e) {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    const followupData = Object.fromEntries(formData.entries());\n\n    followupData.patientId = patientId;\n    followupData.pulse = parseInt(followupData.pulse) || null;\n    followupData.weight = parseFloat(followupData.weight) || null;\n    followupData.temperature = parseFloat(followupData.temperature) || null;\n\n    window.electronAPI.send('addFollowup', followupData);\n  }\n\n  function closeModal() {\n    if (formContainer) {\n      formContainer.remove();\n    }\n  }\n\n\n\n  window.electronAPI.receive('addFollowupResponse', (response) => {\n    if (response.success) {\n      showToast('Suivi ajouté avec succès', 'success');\n      closeModal();\n      if (typeof onFollowupAdded === 'function') {\n        onFollowupAdded();\n      }\n    } else {\n      showToast(\"Erreur lors de l'ajout du suivi : \" + response.error, 'error');\n    }\n  });\n\n  return {\n    render,\n    closeModal\n  };\n}\n",
  "extension": "js"
}
,
{
  "path": "src/components/Followups/EditFollowup.js\n",
  "content": "// src/components/Followups/EditFollowup.js\n\nexport default function EditFollowup(followupId, onFollowupUpdated) {\n  let formContainer = null;\n  let followupData = null;\n\n  function render() {\n    const template = `\n        <div class=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full\" id=\"editFollowupModal\">\n          <div class=\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\">\n            <div class=\"mt-3 text-center\">\n              <h3 class=\"text-lg leading-6 font-medium text-gray-900\">Modifier le suivi</h3>\n              <form id=\"editFollowupForm\" class=\"mt-2 text-left\">\n                <div class=\"mb-4\">\n                  <label for=\"followupDate\" class=\"block text-gray-700 text-sm font-bold mb-2\">Date du suivi</label>\n                  <input type=\"date\" id=\"followupDate\" name=\"followupDate\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" required>\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"bloodPressure\" class=\"block text-gray-700 text-sm font-bold mb-2\">Tension artérielle</label>\n                  <input type=\"text\" id=\"bloodPressure\" name=\"bloodPressure\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" placeholder=\"ex: 120/80\">\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"pulse\" class=\"block text-gray-700 text-sm font-bold mb-2\">Pouls</label>\n                  <input type=\"number\" id=\"pulse\" name=\"pulse\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" placeholder=\"ex: 72\">\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"weight\" class=\"block text-gray-700 text-sm font-bold mb-2\">Poids (kg)</label>\n                  <input type=\"number\" id=\"weight\" name=\"weight\" step=\"0.1\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" placeholder=\"ex: 70.5\">\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"temperature\" class=\"block text-gray-700 text-sm font-bold mb-2\">Température (°C)</label>\n                  <input type=\"number\" id=\"temperature\" name=\"temperature\" step=\"0.1\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" placeholder=\"ex: 37.0\">\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"observation\" class=\"block text-gray-700 text-sm font-bold mb-2\">Observation</label>\n                  <textarea id=\"observation\" name=\"observation\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" rows=\"3\"></textarea>\n                </div>\n                <div class=\"flex items-center justify-between mt-4\">\n                  <button type=\"button\" id=\"cancelEditFollowup\" class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\n                    Annuler\n                  </button>\n                  <button type=\"submit\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\n                    Mettre à jour\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      `;\n\n    formContainer = document.createElement('div');\n    formContainer.innerHTML = template;\n    document.body.appendChild(formContainer);\n\n    loadFollowupData();\n    addEventListeners();\n  }\n\n  function addEventListeners() {\n    formContainer.querySelector('#editFollowupForm').addEventListener('submit', handleEditFollowup);\n    formContainer.querySelector('#cancelEditFollowup').addEventListener('click', closeModal);\n  }\n\n  function loadFollowupData() {\n    window.electronAPI.send('getFollowupDetails', followupId);\n  }\n\n  function populateForm(followup) {\n    followupData = followup;\n    formContainer.querySelector('#followupDate').value = followup.followup_date;\n    formContainer.querySelector('#bloodPressure').value = followup.blood_pressure || '';\n    formContainer.querySelector('#pulse').value = followup.pulse || '';\n    formContainer.querySelector('#weight').value = followup.weight || '';\n    formContainer.querySelector('#temperature').value = followup.temperature || '';\n    formContainer.querySelector('#observation').value = followup.observation || '';\n  }\n\n  function handleEditFollowup(e) {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    const updatedFollowupData = Object.fromEntries(formData.entries());\n\n    updatedFollowupData.id = followupId;\n    updatedFollowupData.pulse = parseInt(updatedFollowupData.pulse) || null;\n    updatedFollowupData.weight = parseFloat(updatedFollowupData.weight) || null;\n    updatedFollowupData.temperature = parseFloat(updatedFollowupData.temperature) || null;\n\n    window.electronAPI.send('updateFollowup', updatedFollowupData);\n  }\n\n  function closeModal() {\n    if (formContainer) {\n      formContainer.remove();\n    }\n  }\n\n\n\n  window.electronAPI.receive('followupDetailsResponse', (followup) => {\n    populateForm(followup);\n  });\n\n  window.electronAPI.receive('updateFollowupResponse', (response) => {\n    if (response.success) {\n      showToast('Suivi mis à jour avec succès', 'success');\n      closeModal();\n      if (typeof onFollowupUpdated === 'function') {\n        onFollowupUpdated();\n      }\n    } else {\n      showToast(\"Erreur lors de la mise à jour du suivi : \" + response.error, 'error');\n    }\n  });\n\n  return {\n    render,\n    closeModal\n  };\n}\n",
  "extension": "js"
}
,
{
  "path": "src/components/Followups/FollowupDetails.js\n",
  "content": "\n",
  "extension": "js"
}
,
{
  "path": "src/components/Followups/FollowupList.js\n",
  "content": "\n",
  "extension": "js"
}
,
{
  "path": "src/components/Patients/AddPatientForm.js\n",
  "content": "// src/components/Patients/AddPatientForm.js\n\nexport default function AddPatientForm(onPatientAdded) {\n  let formContainer = null;\n\n  function render() {\n    const template = `\n      <div class=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full\" id=\"addPatientModal\">\n        <div class=\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\">\n          <div class=\"mt-3 text-center\">\n            <h3 class=\"text-lg leading-6 font-medium text-gray-900\">Ajouter un nouveau patient</h3>\n            <form id=\"addPatientForm\" class=\"mt-2 text-left\">\n              <!-- Form fields here -->\n              <div class=\"mb-4\">\n                <label for=\"lastName\" class=\"block text-gray-700 text-sm font-bold mb-2\">Nom</label>\n                <input type=\"text\" id=\"lastName\" name=\"lastName\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" required>\n              </div>\n              <div class=\"mb-4\">\n                <label for=\"firstName\" class=\"block text-gray-700 text-sm font-bold mb-2\">Prénom</label>\n                <input type=\"text\" id=\"firstName\" name=\"firstName\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" required>\n              </div>\n              <div class=\"mb-4\">\n                <label for=\"dateOfBirth\" class=\"block text-gray-700 text-sm font-bold mb-2\">Date de naissance</label>\n                <input type=\"date\" id=\"dateOfBirth\" name=\"dateOfBirth\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" required>\n              </div>\n              <div class=\"mb-4\">\n                <label for=\"gender\" class=\"block text-gray-700 text-sm font-bold mb-2\">Genre</label>\n                <select id=\"gender\" name=\"gender\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" required>\n                  <option value=\"\">Sélectionnez</option>\n                  <option value=\"male\">Masculin</option>\n                  <option value=\"female\">Féminin</option>\n                  <option value=\"other\">Autre</option>\n                </select>\n              </div>\n              <div class=\"mb-4\">\n                <label for=\"profession\" class=\"block text-gray-700 text-sm font-bold mb-2\">Profession</label>\n                <select id=\"profession\" name=\"profession\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\">\n                  <option value=\"\">Sélectionnez une profession</option>\n                </select>\n              </div>\n              <div class=\"mb-4\">\n                <label for=\"currentResidence\" class=\"block text-gray-700 text-sm font-bold mb-2\">Résidence actuelle</label>\n                <select id=\"currentResidence\" name=\"currentResidence\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\">\n                  <option value=\"\">Sélectionnez une résidence</option>\n                </select>\n              </div>\n              <div class=\"mb-4\">\n                <label for=\"usualResidence\" class=\"block text-gray-700 text-sm font-bold mb-2\">Résidence habituelle</label>\n                <select id=\"usualResidence\" name=\"usualResidence\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\">\n                  <option value=\"\">Sélectionnez une résidence</option>\n                </select>\n              </div>\n              <div class=\"mb-4\">\n                <label for=\"contacts\" class=\"block text-gray-700 text-sm font-bold mb-2\">Contacts</label>\n                <input type=\"text\" id=\"contacts\" name=\"contacts\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\">\n              </div>\n              <div class=\"flex items-center justify-between mt-4\">\n                <button type=\"button\" id=\"cancelAddPatient\" class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\n                  Annuler\n                </button>\n                <button type=\"submit\" class=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\n                  Ajouter\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    `;\n\n    formContainer = document.createElement('div');\n    formContainer.innerHTML = template;\n    document.body.appendChild(formContainer);\n\n    addEventListeners();\n    loadProfessionsAndResidences();\n  }\n\n  function addEventListeners() {\n    formContainer.querySelector('#addPatientForm').addEventListener('submit', handleAddPatient);\n    formContainer.querySelector('#cancelAddPatient').addEventListener('click', closeModal);\n  }\n\n  function handleAddPatient(e) {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    const patientData = Object.fromEntries(formData.entries());\n    const userId = localStorage.getItem('userId');\n\n    // Convertir les ID en nombres\n    patientData.professionId = parseInt(patientData.profession);\n    patientData.currentResidenceId = parseInt(patientData.currentResidence);\n    patientData.usualResidenceId = parseInt(patientData.usualResidence);\n\n    patientData.contacts = formData.get('contacts');\n\n    if (window.electronAPI && typeof window.electronAPI.send === 'function') {\n      window.electronAPI.send('addPatient', { patientData, userId });\n    } else {\n      console.error('Electron API is not available');\n    }\n  }\n\n  function closeModal() {\n    if (formContainer) {\n      formContainer.remove();\n    }\n  }\n\n  function loadProfessionsAndResidences() {\n    window.electronAPI.send('getProfessions');\n    window.electronAPI.send('getResidences');\n  }\n\n  window.electronAPI.receive('professionsData', (professions) => {\n    const select = formContainer.querySelector('#profession');\n    professions.forEach(p => {\n      const option = document.createElement('option');\n      option.value = p.id;\n      option.textContent = p.name;\n      select.appendChild(option);\n    });\n  });\n\n  window.electronAPI.receive('residencesData', (residences) => {\n    const currentSelect = formContainer.querySelector('#currentResidence');\n    const usualSelect = formContainer.querySelector('#usualResidence');\n    residences.forEach(r => {\n      const option = document.createElement('option');\n      option.value = r.id;\n      option.textContent = r.name;\n      currentSelect.appendChild(option.cloneNode(true));\n      usualSelect.appendChild(option.cloneNode(true));\n    });\n  });\n\n\n\n  if (window.electronAPI && typeof window.electronAPI.receive === 'function') {\n    window.electronAPI.receive('addPatientResponse', (response) => {\n      if (response.success) {\n        showToast('Patient ajouté avec succès', 'success');\n        closeModal();\n        if (typeof onPatientAdded === 'function') {\n          onPatientAdded();\n        }\n      } else {\n        showToast(\"Erreur lors de l'ajout du patient : \" + response.error, 'error');\n      }\n    });\n  }\n\n  return {\n    render,\n    closeModal\n  };\n}\n",
  "extension": "js"
}
,
{
  "path": "src/components/Patients/EditPatient.js\n",
  "content": "// src/components/Patients/EditPatient.js\n\nexport default function EditPatient(patientId, onPatientUpdated) {\n  let formContainer = null;\n  let patientData = null;\n\n  function render() {\n    const template = `\n        <div class=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full\" id=\"editPatientModal\">\n          <div class=\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\">\n            <div class=\"mt-3 text-center\">\n              <h3 class=\"text-lg leading-6 font-medium text-gray-900\">Modifier le patient</h3>\n              <form id=\"editPatientForm\" class=\"mt-2 text-left\">\n                <div class=\"mb-4\">\n                  <label for=\"lastName\" class=\"block text-gray-700 text-sm font-bold mb-2\">Nom</label>\n                  <input type=\"text\" id=\"lastName\" name=\"lastName\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" required>\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"firstName\" class=\"block text-gray-700 text-sm font-bold mb-2\">Prénom</label>\n                  <input type=\"text\" id=\"firstName\" name=\"firstName\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" required>\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"dateOfBirth\" class=\"block text-gray-700 text-sm font-bold mb-2\">Date de naissance</label>\n                  <input type=\"date\" id=\"dateOfBirth\" name=\"dateOfBirth\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" required>\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"gender\" class=\"block text-gray-700 text-sm font-bold mb-2\">Genre</label>\n                  <select id=\"gender\" name=\"gender\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" required>\n                    <option value=\"male\">Masculin</option>\n                    <option value=\"female\">Féminin</option>\n                    <option value=\"other\">Autre</option>\n                  </select>\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"profession\" class=\"block text-gray-700 text-sm font-bold mb-2\">Profession</label>\n                  <select id=\"profession\" name=\"profession\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\">\n                    <option value=\"\">Sélectionnez une profession</option>\n                  </select>\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"currentResidence\" class=\"block text-gray-700 text-sm font-bold mb-2\">Résidence actuelle</label>\n                  <select id=\"currentResidence\" name=\"currentResidence\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\">\n                    <option value=\"\">Sélectionnez une résidence</option>\n                  </select>\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"usualResidence\" class=\"block text-gray-700 text-sm font-bold mb-2\">Résidence habituelle</label>\n                  <select id=\"usualResidence\" name=\"usualResidence\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\">\n                    <option value=\"\">Sélectionnez une résidence</option>\n                  </select>\n                </div>\n                <div class=\"mb-4\">\n                  <label for=\"contacts\" class=\"block text-gray-700 text-sm font-bold mb-2\">Contacts</label>\n                  <input type=\"text\" id=\"contacts\" name=\"contacts\" class=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\">\n                </div>\n                <div class=\"flex items-center justify-between mt-4\">\n                  <button type=\"button\" id=\"cancelEditPatient\" class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\n                    Annuler\n                  </button>\n                  <button type=\"submit\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\">\n                    Mettre à jour\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      `;\n\n    formContainer = document.createElement('div');\n    formContainer.innerHTML = template;\n    document.body.appendChild(formContainer);\n\n    loadPatientData();\n    loadProfessionsAndResidences();\n    addEventListeners();\n  }\n\n  function addEventListeners() {\n    formContainer.querySelector('#editPatientForm').addEventListener('submit', handleEditPatient);\n    formContainer.querySelector('#cancelEditPatient').addEventListener('click', closeModal);\n  }\n\n  function loadPatientData() {\n    window.electronAPI.send('getPatientDetails', { patientId, userId: localStorage.getItem('userId') });\n  }\n\n  function populateForm(patient) {\n    patientData = patient;\n    formContainer.querySelector('#lastName').value = patient.last_name;\n    formContainer.querySelector('#firstName').value = patient.first_name;\n    formContainer.querySelector('#dateOfBirth').value = patient.date_of_birth;\n    formContainer.querySelector('#gender').value = patient.gender;\n    formContainer.querySelector('#profession').value = patient.profession_id || '';\n    formContainer.querySelector('#currentResidence').value = patient.current_residence_id || '';\n    formContainer.querySelector('#usualResidence').value = patient.usual_residence_id || '';\n    formContainer.querySelector('#contacts').value = patient.contacts || '';\n\n  }\n\n  function handleEditPatient(e) {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    const updatedPatientData = Object.fromEntries(formData.entries());\n\n    // Convertir les ID en nombres\n    updatedPatientData.professionId = parseInt(updatedPatientData.profession) || null;\n    updatedPatientData.currentResidenceId = parseInt(updatedPatientData.currentResidence) || null;\n    updatedPatientData.usualResidenceId = parseInt(updatedPatientData.usualResidence) || null;\n\n    updatedPatientData.contacts = formData.get('contacts');\n\n    // Ajouter l'ID du patient\n    updatedPatientData.id = patientId;\n\n    window.electronAPI.send('updatePatient', updatedPatientData);\n  }\n\n  function closeModal() {\n    if (formContainer) {\n      formContainer.remove();\n    }\n  }\n\n  function loadProfessionsAndResidences() {\n    window.electronAPI.send('getProfessions');\n    window.electronAPI.send('getResidences');\n  }\n\n  window.electronAPI.receive('patientDetailsResponse', (patient) => {\n    populateForm(patient);\n  });\n\n  window.electronAPI.receive('professionsData', (professions) => {\n    const select = formContainer.querySelector('#profession');\n    professions.forEach(p => {\n      const option = document.createElement('option');\n      option.value = p.id;\n      option.textContent = p.name;\n      select.appendChild(option);\n    });\n    if (patientData) {\n      select.value = patientData.profession_id || '';\n    }\n  });\n\n  window.electronAPI.receive('residencesData', (residences) => {\n    const currentSelect = formContainer.querySelector('#currentResidence');\n    const usualSelect = formContainer.querySelector('#usualResidence');\n    residences.forEach(r => {\n      const option = document.createElement('option');\n      option.value = r.id;\n      option.textContent = r.name;\n      currentSelect.appendChild(option.cloneNode(true));\n      usualSelect.appendChild(option.cloneNode(true));\n    });\n    if (patientData) {\n      currentSelect.value = patientData.current_residence_id || '';\n      usualSelect.value = patientData.usual_residence_id || '';\n    }\n  });\n\n  window.electronAPI.receive('updatePatientResponse', (response) => {\n    if (response.success) {\n      showToast('Patient mis à jour avec succès', 'success');\n      closeModal();\n      if (typeof onPatientUpdated === 'function') {\n        onPatientUpdated();\n      }\n    } else {\n      showToast(\"Erreur lors de la mise à jour du patient : \" + response.error, 'error');\n    }\n  });\n\n  return {\n    render,\n    closeModal\n  };\n}\n",
  "extension": "js"
}
,
{
  "path": "src/components/Patients/PatientDetails.js\n",
  "content": "// src/components/Patients/PatientDetails.js\n\nexport default function PatientDetails() {\n  let patientId = null;\n\n  function render() {\n    const template = `\n    <div class=\"container mx-auto px-4 py-8\">\n      <div class=\"flex justify-between items-center mb-6\">\n        <h2 class=\"text-2xl font-bold\">Détails du Patient</h2>\n        <button id=\"backToPatientList\" class=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\">\n          Retour à la Liste des Patients\n        </button>\n      </div>\n      <div id=\"patientInfo\" class=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">\n        <!-- Les informations du patient seront injectées ici -->\n      </div>\n       <div class=\"flex space-x-4 mb-4\">\n          <button id=\"generatePdfBtn\" class=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\">\n            Générer PDF\n          </button>\n          <button id=\"generateDocxBtn\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n            Générer DOCX\n          </button>\n        </div>\n      <div class=\"flex space-x-4\">\n        <button id=\"editPatientBtn\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">\n          Modifier\n        </button>\n        <button id=\"deletePatientBtn\" class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\">\n          Supprimer\n        </button>\n        <button id=\"addConsultationBtn\" class=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\">\n          Ajouter une Consultation\n        </button>\n        <button id=\"addFollowupBtn\" class=\"bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded\">\n          Ajouter un Suivi\n        </button>\n      </div>\n      <div class=\"mt-8\">\n        <h3 class=\"text-xl font-bold mb-4\">Consultations</h3>\n        <div id=\"consultationList\">\n          <!-- La liste des consultations sera injectée ici -->\n        </div>\n      </div>\n      <div class=\"mt-8\">\n        <h3 class=\"text-xl font-bold mb-4\">Suivis</h3>\n        <div id=\"followupList\">\n          <!-- La liste des suivis sera injectée ici -->\n        </div>\n      </div>\n    </div>\n  `;\n\n    document.getElementById('app').innerHTML = template;\n    addEventListeners();\n    loadPatientDetails();\n    loadConsultations();\n    loadFollowups();\n  }\n\n  function addEventListeners() {\n    document.getElementById('backToPatientList').addEventListener('click', navigateToPatientList);\n    document.getElementById('editPatientBtn').addEventListener('click', handleEditPatient);\n    document.getElementById('deletePatientBtn').addEventListener('click', handleDeletePatient);\n    document.getElementById('addConsultationBtn').addEventListener('click', handleAddConsultation);\n    document.getElementById('addFollowupBtn').addEventListener('click', handleAddFollowup);\n    document.getElementById('generatePdfBtn').addEventListener('click', handleGeneratePdf);\n    document.getElementById('generateDocxBtn').addEventListener('click', handleGenerateDocx);\n  }\n\n\n  function handleGeneratePdf() {\n    const userId = localStorage.getItem('userId');\n    console.log('Generating PDF for patient ID:', patientId, 'User ID:', userId);\n    if (!patientId || !userId) {\n      showToast('Erreur : ID du patient ou de l\\'utilisateur non défini');\n      return;\n    }\n    window.electronAPI.send('generatePdf', { patientId, userId });\n  }\n\n\n  function handleGenerateDocx() {\n    const userId = localStorage.getItem('userId');\n    console.log('Generating DOCX for patient ID:', patientId, 'User ID:', userId);\n    if (!patientId || !userId) {\n      showToast('Erreur : ID du patient ou de l\\'utilisateur non défini');\n      return;\n    }\n    window.electronAPI.send('generateDocx', { patientId, userId });\n  }\n\n\n  function navigateToPatientList() {\n    import('./PatientList.js').then(module => {\n      const PatientList = module.default;\n      const patientList = PatientList();\n      patientList.render();\n    }).catch(err => console.error('Error loading PatientList:', err));\n  }\n\n  function handleEditPatient() {\n    import('./EditPatient.js').then(module => {\n      const EditPatient = module.default;\n      const editPatient = EditPatient(patientId, loadPatientDetails);\n      editPatient.render();\n    }).catch(err => console.error('Error loading EditPatient:', err));\n  }\n\n  function handleDeletePatient() {\n    if (confirm('Êtes-vous sûr de vouloir supprimer ce patient ?')) {\n      window.electronAPI.send('deletePatient', patientId);\n    }\n  }\n\n  function handleAddConsultation() {\n    import('../Consultations/AddConsultation.js').then(module => {\n      const AddConsultation = module.default;\n      const addConsultation = AddConsultation(patientId, loadConsultations);\n      addConsultation.render();\n    }).catch(err => console.error('Error loading AddConsultation:', err));\n  }\n\n  function loadConsultations() {\n    if (window.electronAPI && typeof window.electronAPI.send === 'function') {\n      window.electronAPI.send('getConsultations', patientId);\n    } else {\n      console.error('Electron API is not available');\n    }\n  }\n\n  function displayConsultations(consultations) {\n    const consultationList = document.getElementById('consultationList');\n    if (consultations.length === 0) {\n      consultationList.innerHTML = '<p>Aucune consultation enregistrée.</p>';\n    } else {\n      consultationList.innerHTML = consultations.map(consultation => `\n            <div class=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">\n                <h4 class=\"text-xl font-bold mb-4\">Consultation du ${new Date(consultation.consultation_date).toLocaleDateString()}</h4>\n                <div class=\"grid grid-cols-2 gap-4\">\n                    <p><strong>Motif:</strong> ${consultation.reason || 'Non spécifié'}</p>\n                    <p><strong>Tension artérielle:</strong> ${consultation.blood_pressure || 'Non mesurée'}</p>\n                    <p><strong>Pouls:</strong> ${consultation.pulse ? consultation.pulse + ' bpm' : 'Non mesuré'}</p>\n                    <p><strong>Poids:</strong> ${consultation.weight ? consultation.weight + ' kg' : 'Non mesuré'}</p>\n                    <p><strong>Température:</strong> ${consultation.temperature ? consultation.temperature + ' °C' : 'Non mesurée'}</p>\n                </div>\n                <div class=\"mt-4\">\n                    <p><strong>Antécédents médicaux:</strong></p>\n                    <p class=\"ml-4\">${consultation.medical_history || 'Non spécifiés'}</p>\n                </div>\n                <div class=\"mt-4\">\n                    <p><strong>Examen clinique:</strong></p>\n                    <p class=\"ml-4\">${consultation.clinical_examination || 'Non spécifié'}</p>\n                </div>\n                <div class=\"mt-4\">\n                    <p><strong>Diagnostic:</strong></p>\n                    <p class=\"ml-4\">${consultation.diagnosis || 'Non spécifié'}</p>\n                </div>\n                <div class=\"mt-4\">\n                    <p><strong>Traitement:</strong></p>\n                    <p class=\"ml-4\">${consultation.medical_treatment || 'Non spécifié'}</p>\n                </div>\n                <div class=\"mt-4 flex justify-end space-x-2\">\n                    <button class=\"edit-consultation bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\" data-id=\"${consultation.id}\">\n                        Modifier\n                    </button>\n                    <button class=\"delete-consultation bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\" data-id=\"${consultation.id}\">\n                        Supprimer\n                    </button>\n                </div>\n            </div>\n        `).join('');\n\n      // Ajouter les event listeners pour les boutons de modification et de suppression\n      document.querySelectorAll('.edit-consultation').forEach(button => {\n        button.addEventListener('click', (e) => handleEditConsultation(e.target.dataset.id));\n      });\n      document.querySelectorAll('.delete-consultation').forEach(button => {\n        button.addEventListener('click', (e) => handleDeleteConsultation(e.target.dataset.id));\n      });\n    }\n  }\n\n  function handleEditConsultation(consultationId) {\n    import('../Consultations/EditConsultation.js').then(module => {\n      const EditConsultation = module.default;\n      const editConsultation = EditConsultation(consultationId, loadConsultations);\n      editConsultation.render();\n    }).catch(err => console.error('Error loading EditConsultation:', err));\n  }\n\n  function handleDeleteConsultation(consultationId) {\n    if (confirm('Êtes-vous sûr de vouloir supprimer cette consultation ?')) {\n      window.electronAPI.send('deleteConsultation', consultationId);\n    }\n  }\n\n  function handleAddFollowup() {\n    import('../Followups/AddFollowup.js').then(module => {\n      const AddFollowup = module.default;\n      const addFollowup = AddFollowup(patientId, loadFollowups);\n      addFollowup.render();\n    }).catch(err => console.error('Error loading AddFollowup:', err));\n  }\n\n  function loadPatientDetails() {\n    const userId = localStorage.getItem('userId');\n    if (window.electronAPI && typeof window.electronAPI.send === 'function') {\n      window.electronAPI.send('getPatientDetails', { patientId, userId });\n    } else {\n      console.error('Electron API is not available');\n    }\n  }\n\n  function loadFollowups() {\n    if (window.electronAPI && typeof window.electronAPI.send === 'function') {\n      window.electronAPI.send('getFollowups', patientId);\n    } else {\n      console.error('Electron API is not available');\n    }\n  }\n\n  function handleEditFollowup(followupId) {\n    import('../Followups/EditFollowup.js').then(module => {\n      const EditFollowup = module.default;\n      const editFollowup = EditFollowup(followupId, loadFollowups);\n      editFollowup.render();\n    }).catch(err => console.error('Error loading EditFollowup:', err));\n  }\n\n  function handleDeleteFollowup(followupId) {\n    if (confirm('Êtes-vous sûr de vouloir supprimer ce suivi ?')) {\n      window.electronAPI.send('deleteFollowup', followupId);\n    }\n  }\n\n\n  function displayPatientDetails(patient) {\n    const patientInfo = document.getElementById('patientInfo');\n    patientInfo.innerHTML = `\n      <p><strong>Numéro de patient:</strong> ${patient.patient_number}</p>\n      <p><strong>Nom:</strong> ${patient.last_name}</p>\n      <p><strong>Prénom:</strong> ${patient.first_name}</p>\n      <p><strong>Date de naissance:</strong> ${patient.date_of_birth}</p>\n      <p><strong>Genre:</strong> ${patient.gender}</p>\n      <p><strong>Profession:</strong> ${patient.profession || 'Non spécifié'}</p>\n      <p><strong>Résidence actuelle:</strong> ${patient.current_residence || 'Non spécifié'}</p>\n      <p><strong>Résidence habituelle:</strong> ${patient.usual_residence || 'Non spécifié'}</p>\n      <p><strong>Contacts:</strong> ${patient.contacts || 'Non spécifié'}</p>\n    `;\n  }\n\n  function displayFollowups(followups) {\n    const followupList = document.getElementById('followupList');\n    if (followups.length === 0) {\n      followupList.innerHTML = '<p>Aucun suivi enregistré.</p>';\n    } else {\n      followupList.innerHTML = followups.map(followup => `\n            <div class=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">\n                <p><strong>Date:</strong> ${new Date(followup.followup_date).toLocaleDateString()}</p>\n                <p><strong>Tension artérielle:</strong> ${followup.blood_pressure || 'Non mesuré'}</p>\n                <p><strong>Pouls:</strong> ${followup.pulse || 'Non mesuré'}</p>\n                <p><strong>Poids:</strong> ${followup.weight ? followup.weight + ' kg' : 'Non mesuré'}</p>\n                <p><strong>Température:</strong> ${followup.temperature ? followup.temperature + ' °C' : 'Non mesurée'}</p>\n                <p><strong>Observation:</strong> ${followup.observation || 'Aucune observation'}</p>\n                <div class=\"mt-4 flex justify-end space-x-2\">\n                    <button class=\"edit-followup bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\" data-id=\"${followup.id}\">\n                        Modifier\n                    </button>\n                    <button class=\"delete-followup bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\" data-id=\"${followup.id}\">\n                        Supprimer\n                    </button>\n                </div>\n            </div>\n        `).join('');\n\n      // Ajouter les event listeners pour les boutons de modification et de suppression\n      document.querySelectorAll('.edit-followup').forEach(button => {\n        button.addEventListener('click', (e) => handleEditFollowup(e.target.dataset.id));\n      });\n      document.querySelectorAll('.delete-followup').forEach(button => {\n        button.addEventListener('click', (e) => handleDeleteFollowup(e.target.dataset.id));\n      });\n    }\n  }\n\n  if (window.electronAPI && typeof window.electronAPI.receive === 'function') {\n\n    window.electronAPI.receive('documentGenerated', (response) => {\n      if (response.success) {\n        showToast(`Document ${response.type} généré avec succès`, 'success');\n      } else {\n        showToast(`Erreur lors de la génération du document ${response.type}: ${response.error}`, 'error');\n      }\n    });\n\n    window.electronAPI.receive('patientDetailsResponse', (patient) => {\n      displayPatientDetails(patient);\n    });\n\n    window.electronAPI.receive('deletePatientResponse', (response) => {\n      if (response.success) {\n        showToast('Patient supprimé avec succès', 'success');\n        navigateToPatientList();\n      } else {\n        showToast(\"Erreur lors de la suppression du patient : \" + response.error, 'error');\n      }\n    });\n\n    window.electronAPI.receive('deleteFollowupResponse', (response) => {\n      if (response.success) {\n        showToast('Suivi supprimé avec succès', 'success');\n        loadFollowups();\n      } else {\n        showToast(\"Erreur lors de la suppression du suivi : \" + response.error, 'error');\n      }\n    });\n\n    window.electronAPI.receive('followupsData', (followups) => {\n      if (Array.isArray(followups)) {\n        displayFollowups(followups);\n      } else {\n        console.error('Error loading followups:', followups.error);\n      }\n    });\n\n    window.electronAPI.receive('consultationsData', (consultations) => {\n      if (Array.isArray(consultations)) {\n        displayConsultations(consultations);\n      } else {\n        console.error('Error loading consultations:', consultations.error);\n      }\n    });\n\n    window.electronAPI.receive('deleteConsultationResponse', (response) => {\n      if (response.success) {\n        showToast('Consultation supprimée avec succès', 'success');\n        loadConsultations();\n      } else {\n        showToast(\"Erreur lors de la suppression de la consultation : \" + response.error, 'error');\n      }\n    });\n\n  }\n\n  return {\n    render: (id) => {\n      patientId = id;\n      render();\n    }\n  };\n}\n",
  "extension": "js"
}
,
{
  "path": "src/components/Patients/PatientList.js\n",
  "content": "// src/components/Patients/PatientList.js\n\nexport default function PatientList() {\n  function render() {\n    const template = `\n        <div class=\"min-h-screen bg-gray-100\">\n          <nav class=\"bg-white shadow-sm\">\n            <div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n              <div class=\"flex justify-between h-16\">\n                <div class=\"flex\">\n                  <div class=\"flex-shrink-0 flex items-center\">\n                    <h1 class=\"text-xl font-bold\">Suivi des Patients</h1>\n                  </div>\n                  <div class=\"hidden sm:ml-6 sm:flex sm:space-x-8\">\n                    <a href=\"#\" id=\"dashboardLink\" class=\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium\">\n                      Dashboard\n                    </a>\n                    <a href=\"#\" class=\"border-indigo-500 text-gray-900 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium\">\n                      Liste des Patients\n                    </a>\n                    <a href=\"#\" id=\"configLink\" class=\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium\">\n                      Configuration\n                    </a>\n                  </div>\n                </div>\n                <div class=\"hidden sm:ml-6 sm:flex sm:items-center\">\n                  <button id=\"logoutButton\" class=\"ml-3 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">\n                    Déconnexion\n                  </button>\n                </div>\n              </div>\n            </div>\n          </nav>\n  \n          <div class=\"container mx-auto px-4 sm:px-8\">\n            <div class=\"py-8\">\n              <div class=\"flex justify-between items-center\">\n                <h2 class=\"text-2xl font-semibold leading-tight\">Liste des Patients</h2>\n                <button id=\"addPatientButton\" class=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\">\n                  Ajouter un Patient\n                </button>\n              </div>\n              <div class=\"my-2 flex sm:flex-row flex-col\">\n                <div class=\"flex flex-row mb-1 sm:mb-0\">\n                  <div class=\"relative\">\n                    <select id=\"patientsPerPage\" class=\"appearance-none h-full rounded-l border block w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none focus:bg-white focus:border-gray-500\">\n                      <option>5</option>\n                      <option>10</option>\n                      <option>20</option>\n                    </select>\n                  </div>\n                  <div class=\"relative\">\n                    <select id=\"patientStatus\" class=\"appearance-none h-full rounded-r border-t sm:rounded-r-none sm:border-r-0 border-r border-b block w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none focus:border-l focus:border-r focus:bg-white focus:border-gray-500\">\n                      <option>Tous</option>\n                      <option>Actif</option>\n                      <option>Inactif</option>\n                    </select>\n                  </div>\n                </div>\n                <div class=\"block relative\">\n                  <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                    <svg viewBox=\"0 0 24 24\" class=\"h-4 w-4 fill-current text-gray-500\">\n                      <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                    </svg>\n                  </span>\n                  <input id=\"searchPatients\" placeholder=\"Rechercher\" class=\"appearance-none rounded-r rounded-l sm:rounded-l-none border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\" />\n                </div>\n              </div>\n              <div class=\"-mx-4 sm:-mx-8 px-4 sm:px-8 py-4 overflow-x-auto\">\n                <div class=\"inline-block min-w-full shadow rounded-lg overflow-hidden\">\n                  <table class=\"min-w-full leading-normal\">\n                    <thead>\n                      <tr>\n                        <th class=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                            Numéro\n                        </th>\n                        <th class=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                          Patient\n                        </th>\n                        <th class=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                          Date de Naissance\n                        </th>\n                        <th class=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                          Profession\n                        </th>\n                        <th class=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                          Contacts\n                        </th>\n                        <th class=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                          Résidence Actuelle\n                        </th>\n                        <th class=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                          Dernière Consultation\n                        </th>\n                        <th class=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-600 uppercase tracking-wider\">\n                          Actions\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody id=\"patientTableBody\">\n                      <!-- Les données des patients seront insérées ici -->\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      `;\n\n    document.getElementById('app').innerHTML = template;\n    addEventListeners();\n    loadPatients();\n  }\n\n  function addEventListeners() {\n    document.getElementById('dashboardLink').addEventListener('click', navigateToDashboard);\n    document.getElementById('configLink').addEventListener('click', navigateToConfig);\n    document.getElementById('logoutButton').addEventListener('click', handleLogout);\n    document.getElementById('addPatientButton').addEventListener('click', handleAddPatient);\n    document.getElementById('patientsPerPage').addEventListener('change', handlePatientsPerPageChange);\n    document.getElementById('patientStatus').addEventListener('change', handlePatientStatusChange);\n    document.getElementById('searchPatients').addEventListener('input', handleSearchPatients);\n  }\n\n  function navigateToDashboard(e) {\n    e.preventDefault();\n    import('../Dashboard.js').then(module => {\n      const Dashboard = module.default;\n      const dashboard = Dashboard();\n      dashboard.render();\n    }).catch(err => console.error('Error loading Dashboard:', err));\n  }\n\n  function navigateToConfig(e) {\n    e.preventDefault();\n    import('../Configuration/ConfigurationMenu.js').then(module => {\n      const ConfigurationMenu = module.default;\n      ConfigurationMenu().render();\n    }).catch(err => console.error('Error loading ConfigurationMenu:', err));\n  }\n\n  function handleLogout() {\n    localStorage.removeItem('isLoggedIn');\n    localStorage.removeItem('userId');\n    import('../Auth/Login.js').then(module => {\n      const Login = module.default;\n      Login();\n    }).catch(err => console.error('Error loading Login:', err));\n  }\n\n  function handleAddPatient() {\n    import('./AddPatientForm.js').then(module => {\n      const AddPatientForm = module.default;\n      const addPatientForm = AddPatientForm(loadPatients);\n      addPatientForm.render();\n    }).catch(err => console.error('Error loading AddPatientForm:', err));\n  }\n\n  function handlePatientsPerPageChange() {\n    loadPatients();\n  }\n\n  function handlePatientStatusChange() {\n    loadPatients();\n  }\n\n  function handleSearchPatients() {\n    loadPatients();\n  }\n\n  function loadPatients() {\n    const patientsPerPage = document.getElementById('patientsPerPage')?.value;\n    const status = document.getElementById('patientStatus')?.value;\n    const searchTerm = document.getElementById('searchPatients')?.value;\n    const userId = localStorage.getItem('userId');\n\n    const params = {\n      patientsPerPage: patientsPerPage || null,\n      status: status || 'all',\n      searchTerm: searchTerm || '',\n      userId: userId\n    };\n\n    if (window.electronAPI && typeof window.electronAPI.send === 'function') {\n      window.electronAPI.send('getPatients', params);\n    } else {\n      console.error('Electron API is not available');\n    }\n  }\n\n  function viewPatient(patientId) {\n    import('./PatientDetails.js').then(module => {\n      const PatientDetails = module.default;\n      const patientDetails = PatientDetails();\n      patientDetails.render(patientId);\n    }).catch(err => console.error('Error loading PatientDetails:', err));\n  }\n\n  function editPatient(patientId) {\n    console.log('Edit patient:', patientId);\n    // À implémenter plus tard\n  }\n\n  function displayPatients(patients) {\n    console.log('Displaying patients:', patients);\n    const tableBody = document.getElementById('patientTableBody');\n    tableBody.innerHTML = patients.map(patient => `\n            <tr>\n                <td class=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\n                    <p class=\"text-gray-900 whitespace-no-wrap\">${patient.patient_number}</p>\n                </td>\n                <td class=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\n                    <div class=\"flex items-center\">\n                        <div class=\"ml-3\">\n                            <p class=\"text-gray-900 whitespace-no-wrap\">\n                                ${patient.first_name} ${patient.last_name}\n                            </p>\n                        </div>\n                    </div>\n                </td>\n                <td class=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\n                    <p class=\"text-gray-900 whitespace-no-wrap\">${patient.date_of_birth}</p>\n                </td>\n                <td class=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\n                    <p class=\"text-gray-900 whitespace-no-wrap\">${patient.profession || 'N/A'}</p>\n                </td>\n                <td class=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\n                    <p class=\"text-gray-900 whitespace-no-wrap\">${patient.contacts || 'N/A'}</p>\n                </td>\n                <td class=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\n                    <p class=\"text-gray-900 whitespace-no-wrap\">${patient.current_residence || 'N/A'}</p>\n                </td>\n                <td class=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\n                    <p class=\"text-gray-900 whitespace-no-wrap\">${patient.last_consultation || 'N/A'}</p>\n                </td>\n                <td class=\"px-5 py-5 border-b border-gray-200 bg-white text-sm\">\n                    <button class=\"view-patient text-indigo-600 hover:text-indigo-900\" data-id=\"${patient.id}\">Voir</button>\n                    <button class=\"edit-patient text-indigo-600 hover:text-indigo-900 ml-2\" data-id=\"${patient.id}\">Modifier</button>\n                </td>\n            </tr>\n        `).join('');\n\n    // Ajouter les écouteurs d'événements pour les boutons\n    document.querySelectorAll('.view-patient').forEach(button => {\n      button.addEventListener('click', () => viewPatient(button.dataset.id));\n    });\n    document.querySelectorAll('.edit-patient').forEach(button => {\n      button.addEventListener('click', () => editPatient(button.dataset.id));\n    });\n  }\n\n  if (window.electronAPI && typeof window.electronAPI.receive === 'function') {\n    window.electronAPI.receive('patientsData', (patients) => {\n      displayPatients(patients);\n    });\n  }\n\n  return {\n    render\n  };\n}\n",
  "extension": "js"
}
,
{
  "path": "src/db/patient_tracking.db\n",
  "content": "",
  "extension": "db"
}
,
{
  "path": "src/db/queries.js\n",
  "content": "// src/db/queries.js\n\nconst db = require('./schema');\nconst bcrypt = require('bcrypt');\n\nfunction getProfessions() {\n    const stmt = db.prepare(\"SELECT * FROM professions ORDER BY name\");\n    return stmt.all();\n}\n\nfunction addProfession(name) {\n    const stmt = db.prepare(\"INSERT INTO professions (name) VALUES (?)\");\n    const info = stmt.run(name);\n    return { id: info.lastInsertRowid, name };\n}\n\nfunction deleteProfession(id) {\n    const stmt = db.prepare(\"DELETE FROM professions WHERE id = ?\");\n    stmt.run(id);\n    return { success: true, message: 'Profession supprimée avec succès' };\n}\n\nfunction deleteResidence(id) {\n    const stmt = db.prepare(\"DELETE FROM residences WHERE id = ?\");\n    stmt.run(id);\n    return { success: true, message: 'Résidence supprimée avec succès' };\n}\n\nfunction getResidences() {\n    const stmt = db.prepare(\"SELECT * FROM residences ORDER BY name\");\n    return stmt.all();\n}\n\nfunction addResidence(name, type) {\n    const stmt = db.prepare(\"INSERT INTO residences (name, type) VALUES (?, ?)\");\n    const info = stmt.run(name, type);\n    return { id: info.lastInsertRowid, name, type };\n}\n\nfunction loginUser(username, password) {\n    const stmt = db.prepare('SELECT * FROM users WHERE username = ?');\n    const user = stmt.get(username);\n\n    if (!user) {\n        return { success: false, message: 'Utilisateur non trouvé' };\n    }\n\n    return new Promise((resolve, reject) => {\n        bcrypt.compare(password, user.password, (err, result) => {\n            if (err) {\n                console.error('Bcrypt error:', err);\n                reject(new Error('Erreur de vérification du mot de passe'));\n            } else if (result) {\n                resolve({ success: true, userId: user.id });\n            } else {\n                resolve({ success: false, message: 'Mot de passe incorrect' });\n            }\n        });\n    });\n}\n\nfunction registerUser(username, email, password, role) {\n    return new Promise((resolve, reject) => {\n        bcrypt.hash(password, 10, (err, hash) => {\n            if (err) {\n                console.error('Bcrypt error:', err);\n                reject(new Error('Erreur de hachage du mot de passe'));\n            } else {\n                const stmt = db.prepare('INSERT INTO users (username, email, password, role) VALUES (?, ?, ?, ?)');\n                try {\n                    const info = stmt.run(username, email, hash, role);\n                    resolve({ success: true, userId: info.lastInsertRowid });\n                } catch (error) {\n                    if (error.code === 'SQLITE_CONSTRAINT') {\n                        resolve({ success: false, message: 'Nom d\\'utilisateur ou email déjà utilisé' });\n                    } else {\n                        console.error('Database error:', error);\n                        reject(new Error('Erreur d\\'insertion dans la base de données'));\n                    }\n                }\n            }\n        });\n    });\n}\n\nfunction getDashboardData(userId) {\n    const data = {\n        totalPatients: 0,\n        monthlyConsultations: 0,\n        consultationsPerMonth: {\n            labels: [],\n            values: []\n        }\n    };\n\n    const totalPatientsStmt = db.prepare('SELECT COUNT(*) as count FROM patients WHERE user_id = ?');\n    data.totalPatients = totalPatientsStmt.get(userId).count;\n\n    const currentDate = new Date();\n    const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).toISOString();\n\n    const monthlyConsultationsStmt = db.prepare(`\n        SELECT COUNT(*) as count \n        FROM consultations c\n        JOIN patients p ON c.patient_id = p.id\n        WHERE p.user_id = ? AND c.consultation_date >= ?\n    `);\n    data.monthlyConsultations = monthlyConsultationsStmt.get(userId, firstDayOfMonth).count;\n\n    const consultationsPerMonthStmt = db.prepare(`\n        SELECT strftime('%Y-%m', c.consultation_date) as month, COUNT(*) as count\n        FROM consultations c\n        JOIN patients p ON c.patient_id = p.id\n        WHERE p.user_id = ?\n        GROUP BY strftime('%Y-%m', c.consultation_date)\n        ORDER BY month DESC\n        LIMIT 12\n    `);\n    const consultationsPerMonth = consultationsPerMonthStmt.all(userId);\n\n    consultationsPerMonth.reverse().forEach(row => {\n        data.consultationsPerMonth.labels.push(row.month);\n        data.consultationsPerMonth.values.push(row.count);\n    });\n\n    if (data.consultationsPerMonth.labels.length === 0) {\n        data.consultationsPerMonth.labels = ['Pas de données'];\n        data.consultationsPerMonth.values = [0];\n    }\n\n    return data;\n}\n\nfunction generatePatientNumber() {\n    const stmt = db.prepare(\"SELECT MAX(CAST(SUBSTR(patient_number, 2) AS INTEGER)) as max_num FROM patients\");\n    const row = stmt.get();\n    const nextNum = (row.max_num || 0) + 1;\n    return `P${String(nextNum).padStart(5, '0')}`;\n}\n\nfunction addPatient(patientData, userId) {\n    const { firstName, lastName, dateOfBirth, gender, professionId, currentResidenceId, usualResidenceId, contacts } = patientData;\n\n    const insertStmt = db.prepare(`\n        INSERT INTO patients (\n            patient_number, first_name, last_name, date_of_birth, gender, \n            profession_id, current_residence_id, usual_residence_id, contacts, user_id\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n\n    let patientNumber;\n    let retries = 0;\n    const maxRetries = 5;\n\n    while (retries < maxRetries) {\n        try {\n            patientNumber = generatePatientNumber();\n            const info = insertStmt.run(\n                patientNumber, firstName, lastName, dateOfBirth, gender,\n                professionId, currentResidenceId, usualResidenceId, contacts, userId\n            );\n            return { success: true, id: info.lastInsertRowid, patientNumber };\n        } catch (error) {\n            if (error.code === 'SQLITE_CONSTRAINT' && error.message.includes('UNIQUE constraint failed: patients.patient_number')) {\n                retries++;\n                if (retries >= maxRetries) {\n                    throw new Error('Failed to generate a unique patient number after multiple attempts');\n                }\n            } else {\n                console.error('Error adding patient:', error);\n                throw error;\n            }\n        }\n    }\n}\n\nfunction getPatients({ patientsPerPage = null, status = 'all', searchTerm = '', userId }) {\n    let query = `\n        SELECT \n            p.id, p.patient_number, p.first_name, p.last_name, p.gender, p.date_of_birth, p.contacts,\n            prof.name as profession,\n            res_current.name as current_residence,\n            res_usual.name as usual_residence,\n            MAX(c.consultation_date) as last_consultation\n        FROM \n            patients p\n        LEFT JOIN \n            consultations c ON p.id = c.patient_id\n        LEFT JOIN\n            professions prof ON p.profession_id = prof.id\n        LEFT JOIN\n            residences res_current ON p.current_residence_id = res_current.id\n        LEFT JOIN\n            residences res_usual ON p.usual_residence_id = res_usual.id\n        WHERE \n            p.user_id = ?\n    `;\n\n    const queryParams = [userId];\n\n    if (searchTerm) {\n        query += `\n            AND (\n                p.first_name LIKE ? OR \n                p.last_name LIKE ? OR \n                p.contacts LIKE ? OR\n                p.patient_number LIKE ?\n\n            )\n        `;\n        queryParams.push(`%${searchTerm}%`, `%${searchTerm}%`, `%${searchTerm}%`, `%${searchTerm}%`);\n    }\n\n    if (status !== 'all') {\n        // Ajoutez ici la logique pour filtrer par statut si nécessaire\n    }\n\n    query += `\n        GROUP BY \n            p.id\n        ORDER BY \n            p.last_name, p.first_name\n    `;\n\n    if (patientsPerPage) {\n        query += \" LIMIT ?\";\n        queryParams.push(parseInt(patientsPerPage));\n    }\n\n    const stmt = db.prepare(query);\n    return stmt.all(...queryParams);\n}\n\nfunction getPatientDetails(patientId, userId) {\n    const stmt = db.prepare(`\n        SELECT * FROM patients\n        WHERE id = ? AND user_id = ?\n    `);\n    const patient = stmt.get(patientId, userId);\n    if (!patient) {\n        throw new Error('Patient not found or access denied');\n    }\n    return patient;\n}\n\nfunction updatePatient(patientData) {\n    const { id, lastName, firstName, dateOfBirth, gender, professionId, currentResidenceId, usualResidenceId, contacts } = patientData;\n\n    const stmt = db.prepare(`\n        UPDATE patients \n        SET last_name = ?, first_name = ?, date_of_birth = ?, gender = ?, \n            profession_id = ?, current_residence_id = ?, usual_residence_id = ?, contacts = ?\n        WHERE id = ?\n    `);\n\n    stmt.run(lastName, firstName, dateOfBirth, gender, professionId, currentResidenceId, usualResidenceId, contacts, id);\n    return { success: true, message: 'Patient mis à jour avec succès' };\n}\n\nfunction deletePatient(patientId) {\n    const stmt = db.prepare('DELETE FROM patients WHERE id = ?');\n    stmt.run(patientId);\n    return { success: true, message: 'Patient supprimé avec succès' };\n}\n\nfunction addFollowup(followupData) {\n    const { patientId, followupDate, bloodPressure, pulse, weight, temperature, observation } = followupData;\n\n    const stmt = db.prepare(`\n        INSERT INTO followups \n        (patient_id, followup_date, blood_pressure, pulse, weight, temperature, observation)\n        VALUES (?, ?, ?, ?, ?, ?, ?)\n    `);\n\n    const info = stmt.run(patientId, followupDate, bloodPressure, pulse, weight, temperature, observation);\n    return { success: true, id: info.lastInsertRowid, message: 'Suivi ajouté avec succès' };\n}\n\nfunction getFollowups(patientId) {\n    const stmt = db.prepare(`\n        SELECT * FROM followups\n        WHERE patient_id = ?\n        ORDER BY followup_date DESC\n    `);\n    return stmt.all(patientId);\n}\n\nfunction getFollowupDetails(followupId) {\n    const stmt = db.prepare('SELECT * FROM followups WHERE id = ?');\n    return stmt.get(followupId);\n}\n\nfunction updateFollowup(followupData) {\n    const { id, followupDate, bloodPressure, pulse, weight, temperature, observation } = followupData;\n\n    const stmt = db.prepare(`\n        UPDATE followups \n        SET followup_date = ?, blood_pressure = ?, pulse = ?, weight = ?, temperature = ?, observation = ?\n        WHERE id = ?\n    `);\n\n    stmt.run(followupDate, bloodPressure, pulse, weight, temperature, observation, id);\n    return { success: true, message: 'Suivi mis à jour avec succès' };\n}\n\nfunction deleteFollowup(followupId) {\n    const stmt = db.prepare('DELETE FROM followups WHERE id = ?');\n    stmt.run(followupId);\n    return { success: true, message: 'Suivi supprimé avec succès' };\n}\n\nfunction addConsultation(consultationData) {\n    const { patientId, consultationDate, reason, bloodPressure, pulse, weight, temperature, medicalHistory, clinicalExamination, diagnosis, treatment } = consultationData;\n\n    const stmt = db.prepare(`\n        INSERT INTO consultations \n        (patient_id, consultation_date, reason, blood_pressure, pulse, weight, temperature, medical_history, clinical_examination, diagnosis, medical_treatment)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n\n    const info = stmt.run(patientId, consultationDate, reason, bloodPressure, pulse, weight, temperature, medicalHistory, clinicalExamination, diagnosis, treatment);\n    return { success: true, id: info.lastInsertRowid, message: 'Consultation ajoutée avec succès' };\n}\n\nfunction getConsultations(patientId) {\n    const stmt = db.prepare(`\n        SELECT * FROM consultations\n        WHERE patient_id = ?\n        ORDER BY consultation_date DESC\n    `);\n    return stmt.all(patientId);\n}\n\nfunction deleteConsultation(consultationId) {\n    const stmt = db.prepare('DELETE FROM consultations WHERE id = ?');\n    stmt.run(consultationId);\n    return { success: true, message: 'Consultation supprimée avec succès' };\n}\n\nfunction updateConsultation(consultationData) {\n    const { id, consultationDate, reason, bloodPressure, pulse, weight, temperature, medicalHistory, clinicalExamination, diagnosis, treatment } = consultationData;\n\n    const stmt = db.prepare(`\n        UPDATE consultations \n        SET consultation_date = ?, reason = ?, blood_pressure = ?, pulse = ?, weight = ?, temperature = ?, \n            medical_history = ?, clinical_examination = ?, diagnosis = ?, medical_treatment = ?\n        WHERE id = ?\n    `);\n\n    stmt.run(consultationDate, reason, bloodPressure, pulse, weight, temperature, medicalHistory, clinicalExamination, diagnosis, treatment, id);\n    return { success: true, message: 'Consultation mise à jour avec succès' };\n}\n\nfunction getConsultationDetails(consultationId) {\n    const stmt = db.prepare('SELECT * FROM consultations WHERE id = ?');\n    return stmt.get(consultationId);\n}\n\n\nfunction getpatientForPDF(patientId, userId) {\n    const patientStmt = db.prepare(`\n        SELECT p.*, \n               prof.name as profession,\n               cr.name as current_residence,\n               ur.name as usual_residence\n        FROM patients p\n        LEFT JOIN professions prof ON p.profession_id = prof.id\n        LEFT JOIN residences cr ON p.current_residence_id = cr.id\n        LEFT JOIN residences ur ON p.usual_residence_id = ur.id\n        WHERE p.id = ? AND p.user_id = ?\n    `);\n\n    const patient = patientStmt.get(patientId, userId);\n    if (!patient) {\n        throw new Error('Patient not found or access denied');\n    }\n\n    const consultationsStmt = db.prepare(`\n        SELECT * FROM consultations\n        WHERE patient_id = ?\n        ORDER BY consultation_date DESC\n    `);\n    const consultations = consultationsStmt.all(patientId);\n\n    const followupsStmt = db.prepare(`\n        SELECT * FROM followups\n        WHERE patient_id = ?\n        ORDER BY followup_date DESC\n    `);\n    const followups = followupsStmt.all(patientId);\n\n    return {\n        patient,\n        consultations,\n        followups\n    };\n}\n\nfunction getAgeGenderDistribution(userId) {\n    const query = `\n      SELECT \n        CASE \n          WHEN age < 18 THEN '0-18'\n          WHEN age BETWEEN 18 AND 30 THEN '19-30'\n          WHEN age BETWEEN 31 AND 45 THEN '31-45'\n          WHEN age BETWEEN 46 AND 60 THEN '46-60'\n          ELSE '61+'\n        END as age_group,\n        gender,\n        COUNT(*) as count\n      FROM (\n        SELECT \n          (strftime('%Y', 'now') - strftime('%Y', date_of_birth)) - \n          (strftime('%m-%d', 'now') < strftime('%m-%d', date_of_birth)) as age,\n          gender\n        FROM patients\n        WHERE user_id = ?\n      ) as patient_ages\n      GROUP BY age_group, gender\n      ORDER BY age_group, gender\n    `;\n\n    const stmt = db.prepare(query);\n    const results = stmt.all(userId);\n\n    const distribution = {\n        male: [0, 0, 0, 0, 0],\n        female: [0, 0, 0, 0, 0]\n    };\n\n    const ageGroups = ['0-18', '19-30', '31-45', '46-60', '61+'];\n\n    results.forEach(row => {\n        const index = ageGroups.indexOf(row.age_group);\n        if (index !== -1) {\n            if (row.gender === 'male') {\n                distribution.male[index] = row.count;\n            } else if (row.gender === 'female') {\n                distribution.female[index] = row.count;\n            }\n        }\n    });\n\n    return distribution;\n}\n\nmodule.exports = {\n    getProfessions,\n    addProfession,\n    getResidences,\n    addResidence,\n    loginUser,\n    registerUser,\n    getDashboardData,\n    getPatients,\n    addPatient,\n    getPatientDetails,\n    deleteProfession,\n    deleteResidence,\n    updatePatient,\n    deletePatient,\n    addFollowup,\n    getFollowups,\n    getFollowupDetails,\n    updateFollowup,\n    deleteFollowup,\n    addConsultation,\n    getConsultations,\n    deleteConsultation,\n    updateConsultation,\n    getConsultationDetails,\n    getpatientForPDF,\n    getAgeGenderDistribution\n};\n",
  "extension": "js"
}
,
{
  "path": "src/db/schema.js\n",
  "content": "// src/db/schema.js\n\nconst Database = require('better-sqlite3');\nconst path = require('path');\nconst fs = require('fs');\n\n\nlet dbPath;\nif (process.env.NODE_ENV === 'development') {\n    dbPath = path.join(__dirname, 'patient_tracking.db');\n} else {\n    dbPath = path.join(process.resourcesPath, 'db', 'patient_tracking.db');\n}\n\n\n// Assurez-vous que le répertoire de la base de données existe\nconst dbDir = path.dirname(dbPath);\nif (!fs.existsSync(dbDir)) {\n    fs.mkdirSync(dbDir, { recursive: true });\n}\nconst db = new Database(dbPath, { verbose: console.log });\n\nfunction createTables() {\n    // Création de la table users\n    db.exec(`\n        CREATE TABLE IF NOT EXISTS users (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            username TEXT UNIQUE NOT NULL,\n            password TEXT NOT NULL,\n            email TEXT UNIQUE NOT NULL,\n            role TEXT NOT NULL\n        )\n    `);\n\n    db.exec(`CREATE TABLE IF NOT EXISTS professions (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT UNIQUE NOT NULL\n    )`);\n\n    db.exec(`CREATE TABLE IF NOT EXISTS residences (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT NOT NULL,\n        type TEXT NOT NULL\n    )`);\n\n    // Création de la table patients\n    db.exec(`\n        CREATE TABLE IF NOT EXISTS patients (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            user_id INTEGER,\n            patient_number TEXT UNIQUE NOT NULL,\n            first_name TEXT NOT NULL,\n            last_name TEXT NOT NULL,\n            gender TEXT,\n            date_of_birth DATE,\n            profession_id INTEGER,\n            current_residence_id INTEGER,\n            usual_residence_id INTEGER,\n            contacts TEXT,\n            FOREIGN KEY (user_id) REFERENCES users(id),\n            FOREIGN KEY (profession_id) REFERENCES professions(id),\n            FOREIGN KEY (current_residence_id) REFERENCES residences(id),\n            FOREIGN KEY (usual_residence_id) REFERENCES residences(id)\n        )\n    `);\n\n    // Création de l'index unique sur patient_number\n    db.exec(`\n        CREATE UNIQUE INDEX IF NOT EXISTS idx_patient_number ON patients(patient_number)\n    `);\n\n    // Insert default professions\n    const defaultProfessions = [\n        \"Agriculteur\", \"Commerçant\", \"Enseignant\", \"Infirmier\", \"Médecin\",\n        \"Chauffeur\", \"Mécanicien\", \"Couturier\", \"Coiffeur\", \"Électricien\",\n        \"Plombier\", \"Maçon\", \"Menuisier\", \"Pêcheur\", \"Étudiant\", \"Retraité\", \"Autre\"\n    ];\n\n    const insertProfession = db.prepare(\"INSERT OR IGNORE INTO professions (name) VALUES (?)\");\n    defaultProfessions.forEach(profession => {\n        insertProfession.run(profession);\n    });\n\n    // Création de la table consultations\n    db.exec(`\n        CREATE TABLE IF NOT EXISTS consultations (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            patient_id INTEGER,\n            consultation_date DATE,\n            reason TEXT,\n            blood_pressure TEXT,\n            pulse INTEGER,\n            weight REAL,\n            temperature REAL,\n            medical_history TEXT,\n            surgical_history TEXT,\n            gyneco_obstetric_history TEXT,\n            clinical_examination TEXT,\n            syndrome TEXT,\n            assessment TEXT,\n            diagnosis TEXT,\n            medical_treatment TEXT,\n            hygiene_dietary_advice TEXT,\n            other_treatments TEXT,\n            terahertz_therapy_session TEXT,\n            session_number INTEGER,\n            conclusion TEXT,\n            treating_physician TEXT,\n            FOREIGN KEY (patient_id) REFERENCES patients(id)\n        )\n    `);\n\n    // Création de la table followups\n    db.exec(`\n        CREATE TABLE IF NOT EXISTS followups (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            patient_id INTEGER,\n            followup_date DATE,\n            blood_pressure TEXT,\n            pulse INTEGER,\n            weight REAL,\n            temperature REAL,\n            session_number INTEGER,\n            observation TEXT,\n            satisfaction TEXT,\n            course_of_action TEXT,\n            actions_to_take TEXT,\n            interactive_number TEXT,\n            FOREIGN KEY (patient_id) REFERENCES patients(id)\n        )\n    `);\n}\n\ncreateTables();\n\nmodule.exports = db;\n",
  "extension": "js"
}
,
{
  "path": "src/documentGenerator.js\n",
  "content": "// src/documentGenerator.js\n\nconst PDFDocument = require('pdfkit');\nconst fs = require('fs');\nconst path = require('path');\nconst docx = require('docx');\nconst { app } = require('electron');\nconst { getpatientForPDF } = require('./db/queries');\n\n\nasync function generatePdf(patientId, userId) {\n    console.log('Generating PDF for patient ID:', patientId, 'User ID:', userId);\n\n    try {\n        const data = getpatientForPDF(patientId, userId);\n        const { patient, consultations, followups } = data;\n\n        const doc = new PDFDocument();\n        const filePath = path.join(app.getPath('documents'), `patient_${patient.last_name}_${patient.first_name}_${patient.patient_number}_dossier.pdf`);\n        doc.pipe(fs.createWriteStream(filePath));\n\n        // En-tête\n        doc.fontSize(16).text('DOSSIER PATIENT THz TERA P90', { align: 'center' });\n        doc.moveDown();\n\n        // Informations du patient\n        doc.fontSize(12);\n        doc.text(`Identifiant (ID) n° : ${patient.patient_number || 'N/A'}`);\n        doc.text(`Date : ${new Date().toLocaleDateString()}`);\n        doc.text(`Nom : ${patient.last_name}`);\n        doc.text(`Prénoms : ${patient.first_name}`);\n        doc.text(`Sexe : ${patient.gender === 'male' ? 'Masculin' : 'Féminin'}`);\n        doc.text(`Âge : ${calculateAge(patient.date_of_birth)} ans`);\n        doc.text(`Profession : ${patient.profession || 'N/A'}`);\n        doc.text(`Résidence actuelle : ${patient.current_residence || 'N/A'}`);\n        doc.text(`Résidence habituelle : ${patient.usual_residence || 'N/A'}`);\n        doc.text(`Contacts : ${patient.contacts || 'N/A'}`);\n        doc.moveDown();\n\n        // Dernière consultation\n        if (consultations.length > 0) {\n            const lastConsultation = consultations[0];\n            doc.text('Dernière Consultation', { underline: true });\n            doc.text(`Date : ${new Date(lastConsultation.consultation_date).toLocaleDateString()}`);\n            doc.text(`Motif : ${lastConsultation.reason || 'N/A'}`);\n            doc.text('Constantes :');\n            doc.text(`TA : ${lastConsultation.blood_pressure || 'N/A'} mmHg ; Pouls : ${lastConsultation.pulse || 'N/A'} bat/min ; Poids : ${lastConsultation.weight || 'N/A'} kg ; T° : ${lastConsultation.temperature || 'N/A'} °C`);\n            doc.text('Antécédents :');\n            doc.text(`- Médicaux : ${lastConsultation.medical_history || 'N/A'}`);\n            doc.text(`- Chirurgicaux : ${lastConsultation.surgical_history || 'N/A'}`);\n            doc.text(`- Gynéco-obstétricaux : ${lastConsultation.gyneco_obstetric_history || 'N/A'}`);\n            doc.text(`Examen clinique : ${lastConsultation.clinical_examination || 'N/A'}`);\n            doc.text(`Syndrome : ${lastConsultation.syndrome || 'N/A'}`);\n            doc.text(`Bilan : ${lastConsultation.assessment || 'N/A'}`);\n            doc.text(`Diagnostic retenu : ${lastConsultation.diagnosis || 'N/A'}`);\n            doc.text('Traitement proposé :');\n            doc.text(`- Médical : ${lastConsultation.medical_treatment || 'N/A'}`);\n            doc.text(`- Conseil hygiéno-diététique : ${lastConsultation.hygiene_dietary_advice || 'N/A'}`);\n            doc.text(`- Autres : ${lastConsultation.other_treatments || 'N/A'}`);\n            doc.text(`- SEANCES DE THERAPIE ELECTROMAGNETIQUE AU TERAHERTZ TERA P90`);\n            doc.text(`Séance N° : ${lastConsultation.session_number || 'N/A'}`);\n            doc.text(`Observation : ${lastConsultation.terahertz_therapy_session || 'N/A'}`);\n            doc.text(`Conclusion : ${lastConsultation.conclusion || 'N/A'}`);\n            doc.text(`Nom et signature du prestataire : ${lastConsultation.treating_physician || 'N/A'}`);\n            doc.moveDown();\n        }\n\n        // Suivis\n        doc.text('Suivis', { underline: true });\n        followups.forEach((followup, index) => {\n            doc.text(`Suivi ${index + 1}`);\n            doc.text(`Séance N° : ${followup.session_number || 'N/A'}`);\n            doc.text(`Date : ${new Date(followup.followup_date).toLocaleDateString()}`);\n            doc.text('Constantes :');\n            doc.text(`TA : ${followup.blood_pressure || 'N/A'} mmHg ; Pouls : ${followup.pulse || 'N/A'} bat/min ; Poids : ${followup.weight || 'N/A'} kg ; T° : ${followup.temperature || 'N/A'} °C`);\n            doc.text('REVUE DE LA SEANCE PRECEDENTE (THz Téra P90)');\n            doc.text(`Résultat : ${followup.satisfaction || 'N/A'}`);\n            doc.text(`Conduite à tenir : ${followup.course_of_action || 'N/A'}`);\n            doc.text(`Nom et signature du prestataire : ${followup.actions_to_take || 'N/A'}`);\n            doc.moveDown();\n        });\n\n        doc.end();\n        return filePath;\n    } catch (error) {\n        console.error('Error generating PDF:', error);\n        throw error;\n    }\n}\n\nasync function generateDocx(patientId, userId) {\n    try {\n        const data = getpatientForPDF(patientId, userId);\n        const { patient, consultations, followups } = data;\n\n        const doc = new docx.Document({\n            sections: [{\n                properties: {},\n                children: [\n                    new docx.Paragraph({\n                        text: \"DOSSIER PATIENT THz TERA P90\",\n                        heading: docx.HeadingLevel.HEADING_1,\n                        alignment: docx.AlignmentType.CENTER,\n                    }),\n                    new docx.Paragraph({\n                        text: `Identifiant (ID) n° : ${patient.patient_number || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `Date : ${new Date().toLocaleDateString()}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `Nom : ${patient.last_name}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `Prénoms : ${patient.first_name}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `Sexe : ${patient.gender === 'male' ? 'Masculin' : 'Féminin'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `Âge : ${calculateAge(patient.date_of_birth)} ans`,\n                    }),\n                    new docx.Paragraph({\n                        text: `Profession : ${patient.profession || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `Résidence actuelle : ${patient.current_residence || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `Résidence habituelle : ${patient.usual_residence || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `Contacts : ${patient.contacts || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: \"\",\n                    }),\n                ],\n            }],\n        });\n\n        // Dernière consultation\n        if (consultations.length > 0) {\n            const lastConsultation = consultations[0];\n            doc.addSection({\n                properties: {},\n                children: [\n                    new docx.Paragraph({\n                        text: \"Dernière Consultation\",\n                        heading: docx.HeadingLevel.HEADING_2,\n                    }),\n                    new docx.Paragraph({\n                        text: `Date : ${new Date(lastConsultation.consultation_date).toLocaleDateString()}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `Motif : ${lastConsultation.reason || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: \"Constantes :\",\n                    }),\n                    new docx.Paragraph({\n                        text: `TA : ${lastConsultation.blood_pressure || 'N/A'} mmHg ; Pouls : ${lastConsultation.pulse || 'N/A'} bat/min ; Poids : ${lastConsultation.weight || 'N/A'} kg ; T° : ${lastConsultation.temperature || 'N/A'} °C`,\n                    }),\n                    new docx.Paragraph({\n                        text: \"Antécédents :\",\n                    }),\n                    new docx.Paragraph({\n                        text: `- Médicaux : ${lastConsultation.medical_history || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `- Chirurgicaux : ${lastConsultation.surgical_history || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `- Gynéco-obstétricaux : ${lastConsultation.gyneco_obstetric_history || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `Examen clinique : ${lastConsultation.clinical_examination || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `Syndrome : ${lastConsultation.syndrome || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `Bilan : ${lastConsultation.assessment || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `Diagnostic retenu : ${lastConsultation.diagnosis || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: \"Traitement proposé :\",\n                    }),\n                    new docx.Paragraph({\n                        text: `- Médical : ${lastConsultation.medical_treatment || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `- Conseil hygiéno-diététique : ${lastConsultation.hygiene_dietary_advice || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `- Autres : ${lastConsultation.other_treatments || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: \"- SEANCES DE THERAPIE ELECTROMAGNETIQUE AU TERAHERTZ TERA P90\",\n                    }),\n                    new docx.Paragraph({\n                        text: `Séance N° : ${lastConsultation.session_number || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `Observation : ${lastConsultation.terahertz_therapy_session || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `Conclusion : ${lastConsultation.conclusion || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `Nom et signature du prestataire : ${lastConsultation.treating_physician || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: \"\",\n                    }),\n                ],\n            });\n        }\n\n        // Suivis\n        doc.addSection({\n            properties: {},\n            children: [\n                new docx.Paragraph({\n                    text: \"Suivis\",\n                    heading: docx.HeadingLevel.HEADING_2,\n                }),\n                ...followups.flatMap((followup, index) => [\n                    new docx.Paragraph({\n                        text: `Suivi ${index + 1}`,\n                        heading: docx.HeadingLevel.HEADING_3,\n                    }),\n                    new docx.Paragraph({\n                        text: `Séance N° : ${followup.session_number || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `Date : ${new Date(followup.followup_date).toLocaleDateString()}`,\n                    }),\n                    new docx.Paragraph({\n                        text: \"Constantes :\",\n                    }),\n                    new docx.Paragraph({\n                        text: `TA : ${followup.blood_pressure || 'N/A'} mmHg ; Pouls : ${followup.pulse || 'N/A'} bat/min ; Poids : ${followup.weight || 'N/A'} kg ; T° : ${followup.temperature || 'N/A'} °C`,\n                    }),\n                    new docx.Paragraph({\n                        text: \"REVUE DE LA SEANCE PRECEDENTE (THz Téra P90)\",\n                    }),\n                    new docx.Paragraph({\n                        text: `Résultat : ${followup.satisfaction || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `Conduite à tenir : ${followup.course_of_action || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: `Nom et signature du prestataire : ${followup.actions_to_take || 'N/A'}`,\n                    }),\n                    new docx.Paragraph({\n                        text: \"\",\n                    }),\n                ]),\n            ],\n        });\n\n        const buffer = await docx.Packer.toBuffer(doc);\n        const filePath = path.join(app.getPath('documents'), `patient_${patient.last_name}_${patient.first_name}_${patient.patient_number}_dossier.docx`);\n        fs.writeFileSync(filePath, buffer);\n        return filePath;\n\n    } catch (error) {\n        console.error('Error generating DOCX:', error);\n        throw error;\n    }\n}\n\nfunction calculateAge(birthDate) {\n    const today = new Date();\n    const birth = new Date(birthDate);\n    let age = today.getFullYear() - birth.getFullYear();\n    const monthDiff = today.getMonth() - birth.getMonth();\n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\n        age--;\n    }\n    return age;\n}\n\nmodule.exports = {\n    generatePdf,\n    generateDocx,\n};\n",
  "extension": "js"
}
,
{
  "path": "src/main.js\n",
  "content": "// src/main.js\n\nconst { app, BrowserWindow, ipcMain } = require('electron');\nconst path = require('path');\nconst { getProfessions, addProfession, deleteProfession, getResidences, addResidence, deleteResidence, loginUser, registerUser, getDashboardData, getPatients, addPatient, getPatientDetails, updatePatient, deletePatient, addFollowup, getFollowups, getFollowupDetails, updateFollowup, deleteFollowup, addConsultation, getConsultations, deleteConsultation, updateConsultation, getConsultationDetails, getAgeGenderDistribution } = require('./db/queries');\nconst { generatePdf, generateDocx } = require('./documentGenerator');\n\napp.disableHardwareAcceleration();\n\nlet mainWindow;\n\nfunction createWindow() {\n    console.log('Creating main window');\n    mainWindow = new BrowserWindow({\n        width: 1200,\n        height: 800,\n        webPreferences: {\n            nodeIntegration: false,\n            contextIsolation: true,\n            preload: path.join(__dirname, 'preload.js')\n        }\n    });\n\n    const indexPath = path.join(__dirname, '../index.html');\n    console.log('Loading index.html from:', indexPath);\n    mainWindow.loadFile(indexPath);\n\n    mainWindow.webContents.on('did-finish-load', () => {\n        console.log('Main window loaded successfully');\n    });\n\n    mainWindow.webContents.on('did-fail-load', (event, errorCode, errorDescription) => {\n        console.error('Failed to load window:', errorCode, errorDescription);\n    });\n\n    if (process.env.NODE_ENV === 'development') {\n\n        require('electron-reload')(__dirname, {\n            electron: path.join(__dirname, '../node_modules', '.bin', 'electron'),\n            hardResetMethod: 'exit',\n            forceHardReset: true,\n            debug: true\n        });\n        console.log('Electron-reload configured');\n\n        mainWindow.webContents.openDevTools();\n        console.log('DevTools opened');\n    }\n}\n\napp.whenReady().then(() => {\n    console.log('App is ready, creating window');\n    createWindow();\n\n    // les gestionnaires IPC sont définis dans le fichier main.js\n\n    ipcMain.on('deleteProfession', async (event, id) => {\n        try {\n            const result = await deleteProfession(id);\n            mainWindow.webContents.send('professionDeleted', result);\n            // Rechargez la liste des professions après la suppression\n            const professions = await getProfessions();\n            mainWindow.webContents.send('professionsData', professions);\n        } catch (error) {\n            console.error('Error deleting profession:', error);\n            mainWindow.webContents.send('professionDeleted', { error: 'Failed to delete profession' });\n        }\n    });\n\n    ipcMain.on('deleteResidence', async (event, id) => {\n        try {\n            const result = await deleteResidence(id);\n            mainWindow.webContents.send('residenceDeleted', result);\n            // Rechargez la liste des résidences après la suppression\n            const residences = await getResidences();\n            mainWindow.webContents.send('residencesData', residences);\n        } catch (error) {\n            console.error('Error deleting residence:', error);\n            mainWindow.webContents.send('residenceDeleted', { error: 'Failed to delete residence' });\n        }\n    });\n\n    ipcMain.on('getProfessions', async (event) => {\n        try {\n            const professions = await getProfessions();\n            mainWindow.webContents.send('professionsData', professions);\n        } catch (error) {\n            console.error('Error fetching professions:', error);\n            mainWindow.webContents.send('professionsData', { error: 'Failed to fetch professions' });\n        }\n    });\n\n    ipcMain.on('addProfession', async (event, name) => {\n        try {\n            const result = await addProfession(name);\n            mainWindow.webContents.send('professionAdded', result);\n            // Rechargez la liste des professions après l'ajout\n            const professions = await getProfessions();\n            mainWindow.webContents.send('professionsData', professions);\n        } catch (error) {\n            console.error('Error adding profession:', error);\n            mainWindow.webContents.send('professionAdded', { error: 'Failed to add profession' });\n        }\n    });\n\n    ipcMain.on('getResidences', async (event) => {\n        try {\n            const residences = await getResidences();\n            mainWindow.webContents.send('residencesData', residences);\n        } catch (error) {\n            console.error('Error fetching residences:', error);\n            mainWindow.webContents.send('residencesData', { error: 'Failed to fetch residences' });\n        }\n    });\n\n    ipcMain.on('addResidence', async (event, { name, type }) => {\n        try {\n            const result = await addResidence(name, type);\n            mainWindow.webContents.send('residenceAdded', result);\n            // Rechargez la liste des résidences après l'ajout\n            const residences = await getResidences();\n            mainWindow.webContents.send('residencesData', residences);\n        } catch (error) {\n            console.error('Error adding residence:', error);\n            mainWindow.webContents.send('residenceAdded', { error: 'Failed to add residence' });\n        }\n    });\n\n    ipcMain.on('getDashboardData', async (event, userId) => {\n        try {\n            const data = await getDashboardData(userId);\n            mainWindow.webContents.send('dashboardDataResponse', data);\n        } catch (error) {\n            console.error('Error getting dashboard data:', error);\n            mainWindow.webContents.send('dashboardDataResponse', { error: 'Failed to get dashboard data' });\n        }\n    });\n\n    ipcMain.on('login', async (event, { username, password }) => {\n        try {\n            const result = await loginUser(username, password);\n            mainWindow.webContents.send('loginResponse', result);\n        } catch (error) {\n            console.error('Login error:', error);\n            mainWindow.webContents.send('loginResponse', { success: false, message: error.message });\n        }\n    });\n\n    ipcMain.on('register', async (event, { username, email, password, role }) => {\n        try {\n            const result = await registerUser(username, email, password, role);\n            mainWindow.webContents.send('registerResponse', result);\n        } catch (error) {\n            console.error('Register error:', error);\n            mainWindow.webContents.send('registerResponse', { success: false, message: error.message });\n        }\n    });\n\n    ipcMain.on('addPatient', async (event, { patientData, userId }) => {\n        try {\n            const result = await addPatient(patientData, userId);\n            mainWindow.webContents.send('addPatientResponse', result);\n        } catch (error) {\n            console.error('Error adding patient:', error);\n            mainWindow.webContents.send('addPatientResponse', { success: false, error: error.message });\n        }\n    });\n\n    ipcMain.on('getPatients', async (event, { patientsPerPage, status, searchTerm, userId }) => {\n        try {\n            const patients = await getPatients({ patientsPerPage, status, searchTerm, userId });\n            mainWindow.webContents.send('patientsData', patients);\n        } catch (error) {\n            console.error('Error fetching patients:', error);\n            mainWindow.webContents.send('patientsData', { error: 'Failed to fetch patients' });\n        }\n    });\n\n    ipcMain.on('getPatientDetails', async (event, { patientId, userId }) => {\n        try {\n            const patientDetails = await getPatientDetails(patientId, userId);\n            mainWindow.webContents.send('patientDetailsResponse', patientDetails);\n        } catch (error) {\n            console.error('Error fetching patient details:', error);\n            mainWindow.webContents.send('patientDetailsResponse', { error: 'Failed to fetch patient details' });\n        }\n    });\n\n    ipcMain.on('updatePatient', async (event, patientData) => {\n        try {\n            const result = await updatePatient(patientData);\n            mainWindow.webContents.send('updatePatientResponse', result);\n        } catch (error) {\n            console.error('Error updating patient:', error);\n            mainWindow.webContents.send('updatePatientResponse', { success: false, error: 'Failed to update patient' });\n        }\n    });\n\n    ipcMain.on('deletePatient', async (event, patientId) => {\n        try {\n            const result = await deletePatient(patientId);\n            mainWindow.webContents.send('deletePatientResponse', result);\n        } catch (error) {\n            console.error('Error deleting patient:', error);\n            mainWindow.webContents.send('deletePatientResponse', { success: false, error: 'Failed to delete patient' });\n        }\n    });\n\n    ipcMain.on('addFollowup', async (event, followupData) => {\n        try {\n            const result = await addFollowup(followupData);\n            mainWindow.webContents.send('addFollowupResponse', result);\n        } catch (error) {\n            console.error('Error adding followup:', error);\n            mainWindow.webContents.send('addFollowupResponse', { success: false, error: 'Failed to add followup' });\n        }\n    });\n\n    ipcMain.on('getFollowups', async (event, patientId) => {\n        try {\n            const followups = await getFollowups(patientId);\n            mainWindow.webContents.send('followupsData', followups);\n        } catch (error) {\n            console.error('Error getting followups:', error);\n            mainWindow.webContents.send('followupsData', { error: 'Failed to get followups' });\n        }\n    });\n\n    ipcMain.on('getFollowupDetails', async (event, followupId) => {\n        try {\n            const followup = await getFollowupDetails(followupId);\n            mainWindow.webContents.send('followupDetailsResponse', followup);\n        } catch (error) {\n            console.error('Error getting followup details:', error);\n            mainWindow.webContents.send('followupDetailsResponse', { error: 'Failed to get followup details' });\n        }\n    });\n\n    ipcMain.on('updateFollowup', async (event, followupData) => {\n        try {\n            const result = await updateFollowup(followupData);\n            mainWindow.webContents.send('updateFollowupResponse', result);\n        } catch (error) {\n            console.error('Error updating followup:', error);\n            mainWindow.webContents.send('updateFollowupResponse', { success: false, error: 'Failed to update followup' });\n        }\n    });\n\n    ipcMain.on('deleteFollowup', async (event, followupId) => {\n        try {\n            const result = await deleteFollowup(followupId);\n            mainWindow.webContents.send('deleteFollowupResponse', result);\n        } catch (error) {\n            console.error('Error deleting followup:', error);\n            mainWindow.webContents.send('deleteFollowupResponse', { success: false, error: 'Failed to delete followup' });\n        }\n    });\n\n    ipcMain.on('addConsultation', async (event, consultationData) => {\n        try {\n            const result = await addConsultation(consultationData);\n            mainWindow.webContents.send('addConsultationResponse', result);\n        } catch (error) {\n            console.error('Error adding consultation:', error);\n            mainWindow.webContents.send('addConsultationResponse', { success: false, error: 'Failed to add consultation' });\n        }\n    });\n\n    ipcMain.on('getConsultations', async (event, patientId) => {\n        try {\n            const consultations = await getConsultations(patientId);\n            mainWindow.webContents.send('consultationsData', consultations);\n        } catch (error) {\n            console.error('Error getting consultations:', error);\n            mainWindow.webContents.send('consultationsData', { error: 'Failed to get consultations' });\n        }\n    });\n\n    ipcMain.on('deleteConsultation', async (event, consultationId) => {\n        try {\n            const result = await deleteConsultation(consultationId);\n            mainWindow.webContents.send('deleteConsultationResponse', result);\n        } catch (error) {\n            console.error('Error deleting consultation:', error);\n            mainWindow.webContents.send('deleteConsultationResponse', { success: false, error: 'Failed to delete consultation' });\n        }\n    });\n\n    ipcMain.on('updateConsultation', async (event, consultationData) => {\n        try {\n            const result = await updateConsultation(consultationData);\n            mainWindow.webContents.send('updateConsultationResponse', result);\n        } catch (error) {\n            console.error('Error updating consultation:', error);\n            mainWindow.webContents.send('updateConsultationResponse', { success: false, error: 'Failed to update consultation' });\n        }\n    });\n\n    ipcMain.on('getConsultationDetails', async (event, consultationId) => {\n        try {\n            const consultation = await getConsultationDetails(consultationId);\n            mainWindow.webContents.send('consultationDetailsResponse', consultation);\n        } catch (error) {\n            console.error('Error getting consultation details:', error);\n            mainWindow.webContents.send('consultationDetailsResponse', { error: 'Failed to get consultation details' });\n        }\n    });\n\n    ipcMain.on('generatePdf', async (event, { patientId, userId }) => {\n        try {\n            console.log('Generating PDF for patient ID:', patientId, 'User ID:', userId);\n            if (!patientId || !userId) {\n                throw new Error('Patient ID or User ID is undefined or null');\n            }\n            const filePath = await generatePdf(patientId, userId);\n            mainWindow.webContents.send('documentGenerated', { success: true, type: 'PDF', filePath });\n        } catch (error) {\n            console.error('Error generating PDF:', error);\n            mainWindow.webContents.send('documentGenerated', { success: false, type: 'PDF', error: error.message });\n        }\n    });\n\n    ipcMain.on('generateDocx', async (event, { patientId, userId }) => {\n        try {\n            console.log('Generating DOCX for patient ID:', patientId, 'User ID:', userId);\n            if (!patientId || !userId) {\n                throw new Error('Patient ID or User ID is undefined or null');\n            }\n            const filePath = await generateDocx(patientId, userId);\n            mainWindow.webContents.send('documentGenerated', { success: true, type: 'DOCX', filePath });\n        } catch (error) {\n            console.error('Error generating DOCX:', error);\n            mainWindow.webContents.send('documentGenerated', { success: false, type: 'DOCX', error: error.message });\n        }\n    });\n\n    ipcMain.on('getAgeGenderDistribution', async (event, userId) => {\n        try {\n            const data = await getAgeGenderDistribution(userId);\n            mainWindow.webContents.send('ageGenderDistributionResponse', data);\n        } catch (error) {\n            console.error('Error getting age-gender distribution:', error);\n            mainWindow.webContents.send('ageGenderDistributionResponse', { error: 'Failed to get age-gender distribution' });\n        }\n    });\n\n\n});\n\napp.on('window-all-closed', () => {\n    if (process.platform !== 'darwin') {\n        app.quit();\n    }\n});\n\napp.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n        createWindow();\n    }\n});\n",
  "extension": "js"
}
,
{
  "path": "src/preload.js\n",
  "content": "// src/preload.js\n\nconst { contextBridge, ipcRenderer } = require('electron');\n\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n    send: (channel, data) => {\n        ipcRenderer.send(channel, data);\n    },\n    receive: (channel, func) => {\n        ipcRenderer.on(channel, (event, ...args) => func(...args));\n    },\n    removeAllListeners: (channel) => {\n        ipcRenderer.removeAllListeners(channel);\n    }\n});\n\n\nconsole.log('Preload script executed, Electron API exposed as electronAPI');\n",
  "extension": "js"
}
,
{
  "path": "src/renderer.js\n",
  "content": "// src/renderer.js\n\nconsole.log('Renderer script loaded');\n\nfunction loadComponent(componentName) {\n    switch (componentName) {\n        case 'Dashboard':\n            import('./components/Dashboard.js').then(module => {\n                const Dashboard = module.default;\n                const dashboard = Dashboard();\n                dashboard.render();\n            }).catch(err => console.error('Error loading Dashboard:', err));\n            break;\n        case 'PatientList':\n            import('./components/Patients/PatientList.js').then(module => {\n                const PatientList = module.default;\n                const patientList = PatientList();\n                patientList.render();\n            }).catch(err => console.error('Error loading PatientList:', err));\n            break;\n        case 'Login':\n            import('./components/Auth/Login.js').then(module => {\n                const Login = module.default;\n                Login();\n            }).catch(err => console.error('Error loading Login:', err));\n            break;\n        default:\n            console.error('Unknown component:', componentName);\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('DOM fully loaded');\n\n    const isLoggedIn = localStorage.getItem('isLoggedIn') === 'true';\n    console.log('Is user logged in?', isLoggedIn);\n\n    if (isLoggedIn) {\n        loadComponent('Dashboard');\n    } else {\n        loadComponent('Login');\n    }\n});\n\n// Écoutez les changements de stockage local pour recharger le composant approprié\nwindow.addEventListener('storage', (event) => {\n    if (event.key === 'isLoggedIn') {\n        const isLoggedIn = event.newValue === 'true';\n        loadComponent(isLoggedIn ? 'Dashboard' : 'Login');\n    }\n});\n\nwindow.navigateTo = function (componentName) {\n    console.log(`Navigating to ${componentName}`);\n    switch (componentName) {\n        case 'Dashboard':\n            import('./components/Dashboard.js').then(module => {\n                const Dashboard = module.default;\n                const dashboard = Dashboard();\n                dashboard.render();\n            }).catch(err => console.error('Error loading Dashboard:', err));\n            break;\n        case 'PatientList':\n            import('./components/Patients/PatientList.js').then(module => {\n                const PatientList = module.default;\n                const patientList = PatientList();\n                patientList.render();\n            }).catch(err => console.error('Error loading PatientList:', err));\n            break;\n        // Add other cases as needed\n        default:\n            console.error('Unknown component:', componentName);\n    }\n};\n\n// Exposez une fonction pour naviguer entre les composants\nwindow.navigateTo = loadComponent;\n",
  "extension": "js"
}
]
